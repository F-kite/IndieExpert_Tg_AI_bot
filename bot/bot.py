from telebot import types
import atexit
import logging
import openai
from openai import OpenAI
from bot_init import bot
from config import *
from database.client import get_user_info, get_current_prompt, save_query_to_history, ensure_user_exists, users_collection
from handlers import callback_handlers, message_handlers
from utils.keyboards import create_inline_menu
from utils.logger import get_logger
from utils.helpers import auto_delete_message, format_error_system_message, build_history_messages, escape_markdown_v2
from utils.limits import check_ai_usage


callback_handlers.register_handlers(bot)
message_handlers.register_handlers(bot)
logger = get_logger(__name__)

@atexit.register
def shutdown_logger():
    logger.info("‚õî –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ò–ò
client_gpt = OpenAI(api_key=OPENAI_API_KEY)

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ –∫–Ω–æ–ø–æ–∫ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞
def setup_bot_commands():
    bot.set_my_commands([
        types.BotCommand(cmd, desc) for cmd, desc in SIDE_BUTTONS.items()
    ])
setup_bot_commands()


# ---- –û–±—Ä–∞–±–æ—Ç—á–∫–∏–∫–∏ ----
@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    user_id = call.from_user.id

    if user_id == BOT_ID:
        logging.warning(f"‚ö†Ô∏è Callback –æ—Ç –±–æ—Ç–∞ ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è.\n`{ call.message.text}`")
        return


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
@bot.pre_checkout_query_handler(func=lambda q: True)
def checkout(pre_checkout_query):
    bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥—Ä—É–≥–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda message: True)
def cmd_handle_message(message):
    user = message.from_user
    user_id = user.id
    chat_id = message.chat.id
    user_input = message.text
    ensure_user_exists(user)

    def get_key_by_name(name):
        for key, data in AI_PRESETS.items():
            if data.get("name") == name:
                return key
        return None  # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ

    try:
        user_data = get_user_info(user_id)
        ai_preset = AI_PRESETS.get(user_data["ai_model"], AI_PRESETS["gpt-4o"])
        ai_role = ROLE_PRESETS.get(user_data["role"], ROLE_PRESETS["default"])
        ai_model = get_key_by_name(ai_preset["name"])
        
        role_prompt = get_current_prompt(user_id)
        user_prompt = user_input

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –∏ –ª–∏–º–∏—Ç—ã
        allowed, reason = check_ai_usage(user_id, user_data["ai_model"])
        if not allowed:
            msg = bot.send_message(chat_id, reason + ".\n\n–° –ø–æ–¥–ø–∏—Å–∫–æ–π –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ò–ò –∏—Å—á–µ–∑–Ω—É—Ç")
            auto_delete_message(chat_id, msg.message_id, 3)
            return
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ messages —Å –∏—Å—Ç–æ—Ä–∏–µ–π –ø—Ä–æ—à–ª—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        messages = build_history_messages(user_id, role_prompt, user_prompt, max_history=10)
        
        # –í—ã–∑–æ–≤ gpt
        response = client_gpt.chat.completions.create(
            model=ai_model,
            messages=messages,
            temperature=ai_role["temperature"],
            max_tokens=ai_role["max_tokens"],
            top_p=ai_role["top_p"],
            frequency_penalty=ai_role["frequency_penalty"],
            presence_penalty=ai_role["presence_penalty"]
        )

        ai_response = response.choices[0].message.content.strip()
        save_query_to_history(user_id, user_input, ai_response)
        
        safe_response = escape_markdown_v2(ai_response)

        bot.send_message(chat_id, safe_response, parse_mode="MarkdownV2")

        #–°—á–µ—Ç—á–∏–∫ –∏—Å–ø-—è +1
        users_collection.update_one(
            {"user_id": user_id},
            {"$inc": {f"monthly_usage.{ai_model}": 1}}  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫
        )

    except openai.RateLimitError as e:
        msg = bot.send_message(chat_id, "‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –æ–±—Ä–∞—â–µ–Ω–∏–π –∫ OpenAI. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.",)
        auto_delete_message(chat_id, msg.message_id, 5)
        logger.error(f"Rate limit error: {e}")

    except openai.APIError as e:
        error_message = format_error_system_message(
            title="–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏",
            error_text=str(e)
        )
        markup = create_inline_menu(SUPPORT_BUTTON)
        msg = bot.send_message(chat_id, error_message, reply_markup=markup, parse_mode="HTML")
        auto_delete_message(chat_id, msg.message_id, 60)
        logger.error(f"OpenAI API error: {e}")

    except Exception as e:
        error_message = format_error_system_message(
            title="–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞.",
            error_text=str(e)
        )
        markup = create_inline_menu(SUPPORT_BUTTON)
        msg = bot.send_message(chat_id, error_message, reply_markup=markup, parse_mode="HTML")
        auto_delete_message(chat_id, msg.message_id, 60)
        logger.error(f"–û—à–∏–±–∫–∞: {e}")


# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
if __name__ == "__main__":
    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.polling(none_stop=True)

