import telebot
from telebot import types
from pymongo import MongoClient
from datetime import datetime
from dotenv import load_dotenv
import openai
import atexit
import logging
import sys
import os

import messages
from presets.roles import ROLE_PRESETS
from presets.models import AI_PRESETS
from states import BotStates

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
MONGODB_URI = os.getenv("MONGODB_URI")
MONGODB_DB_NAME = os.getenv("MONGODB_DB_NAME")

BACK_BUTTON = types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(TELEGRAM_TOKEN)
openai.api_key = OPENAI_API_KEY

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π ---
LOGS_DIR = "../logs"
os.makedirs(LOGS_DIR, exist_ok=True)

LOG_FILE = os.path.join(LOGS_DIR, "app.log")

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[
        logging.FileHandler(LOG_FILE, encoding='utf-8'),
        logging.StreamHandler()  # –õ–æ–≥–∏ —Ç–∞–∫–∂–µ –±—É–¥—É—Ç –≤—ã–≤–æ–¥–∏—Ç—å—Å—è –≤ –∫–æ–Ω—Å–æ–ª—å
    ]
)

logger = logging.getLogger(__name__)

def handle_exception(exc_type, exc_value, exc_traceback):
    if issubclass(exc_type, KeyboardInterrupt):
        # –í—ã–∑–æ–≤—ã Ctrl+C –Ω–µ –ª–æ–≥–∏—Ä—É–µ–º
        return sys.__excepthook__(exc_type, exc_value, exc_traceback)
    
    logging.error("–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ", exc_info=(exc_type, exc_value, exc_traceback))

# –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
sys.excepthook = handle_exception

@atexit.register
def shutdown_logger():
    logger.info("‚õî –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

# -------------------------------

def setup_bot_commands():
    bot.set_my_commands([
        types.BotCommand(cmd, desc) for cmd, desc in messages.SIDE_BUTTONS.items()
    ])
    logging.info("‚úÖ –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –±–æ—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")


# –í—ã–∑–æ–≤ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞
setup_bot_commands()

# --- –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB ---
client = MongoClient(MONGODB_URI)
db = client[MONGODB_DB_NAME]
users_collection = db["users"]
history_collection = db["history"]

def test_mongo_connection():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB."""
    try:
        # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ë–î
        client.admin.command('ping')
        logger.info("‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.")
        return True
    except Exception as e:
        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è: {e}")
        return False
if not test_mongo_connection():
    logger.error("‚õî –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞. –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
    exit(1)

# –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
def ensure_user_exists(user):
    now = datetime.now()
    
    user_doc = users_collection.find_one({"user_id": user.id})

    if not user_doc:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–≥–æ
        user_data = {
            "user_id": user.id,
            "first_name": user.first_name,
            "last_name": user.last_name,
            "username": user.username,
            "registered_at": now,
            "last_seen": now,
            "is_subscribed": False,
            "ai_model": "gpt4o",
            "role": "default",
        }
        users_collection.insert_one(user_data)
    else:
        # –ï—Å–ª–∏ –µ—Å—Ç—å ‚Äî –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ last_seen
        users_collection.update_one(
            {"user_id": user.id},
            {"$set": {"last_seen": now}}
        )

def save_query_to_history(user_id, query, response):
    history_collection.insert_one({
        "user_id": user_id,
        "query": query,
        "response": response,
        "timestamp": datetime.now()
    })

def get_user_history(user_id):
    return list(history_collection.find({"user_id": user_id}, {"_id": 0}))

def get_user_info(user_id):
    return users_collection.find_one({"user_id": user_id})

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
def create_inline_menu(buttons):
    markup = types.InlineKeyboardMarkup()
    buttons_list = list(buttons.items())

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–µ –¥–≤–µ –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
    if len(buttons_list) >= 2:
        first_key, first_label = buttons_list[0]
        second_key, second_label = buttons_list[1]

        if first_key.startswith("http"):
            btn1 = types.InlineKeyboardButton(first_label, url=first_key)
        else:
            btn1 = types.InlineKeyboardButton(first_label, callback_data=first_key)

        if second_key.startswith("http"):
            btn2 = types.InlineKeyboardButton(second_label, url=second_key)
        else:
            btn2 = types.InlineKeyboardButton(second_label, callback_data=second_key)

        markup.row(btn1, btn2)

    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –ø–æ –æ–¥–Ω–æ–π
    for key, label in buttons_list[2:]:
        if key.startswith("http"):
            markup.add(types.InlineKeyboardButton(label, url=key))
        else:
            markup.add(types.InlineKeyboardButton(label, callback_data=key))

    return markup

def create_ai_model_keyboard():
    markup = types.InlineKeyboardMarkup()

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ
    models = list(messages.AI_MODELS.items())
    for i in range(0, len(models), 2):
        row = []
        for key, label in models[i:i+2]:
            row.append(types.InlineKeyboardButton(label, callback_data=f"ai_{key}"))
        markup.row(*row)

    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    back_button = types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
    markup.add(back_button)

    return markup


def create_ai_keyboard():
    markup = types.InlineKeyboardMarkup()
    for key, data in AI_PRESETS.items():
        btn = types.InlineKeyboardButton(f"üß† {data['name']}", callback_data=f"ai_{key}")
        markup.add(btn)
    markup.add(BACK_BUTTON)
    return markup

def create_role_keyboard():
    markup = types.InlineKeyboardMarkup()

    for key, data in ROLE_PRESETS.items():
        btn = types.InlineKeyboardButton(data["name"], callback_data=f"role_{key}")
        markup.add(btn)

    back_button = types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
    markup.add(back_button)

    return markup


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback'–æ–≤
@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    chat_id = call.message.chat.id
    user_id = call.from_user.id
    message_id = call.message.message_id

    if call.data == "show_profile":
        text = "üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n–ü–æ–¥–ø–∏—Å–∫–∞: ‚ùå –ù–µ –∞–∫—Ç–∏–≤–Ω–∞"
        markup = create_inline_menu(messages.INLINE_BUTTONS)
        back_btn = types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")
        markup.add(back_btn)

        bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=text, reply_markup=markup)
        bot.answer_callback_query(call.id, "–ü—Ä–æ—Ñ–∏–ª—å")

    elif call.data == "back_to_main":
        markup = create_inline_menu(messages.INLINE_BUTTONS)

        bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text=messages.WELCOME_MESSAGE,
            reply_markup=markup
        )
        bot.answer_callback_query(call.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

    elif call.data == "choose_ai":
        markup = create_ai_keyboard()
        bot.edit_message_text(
            chat_id=chat_id,
            message_id=call.message.message_id,
            text="üß† –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –ò–ò:",
            reply_markup=markup
        )

    elif call.data.startswith("ai_"):
        model_key = call.data[3:]
        users_collection.update_one({"user_id": user_id}, {"$set": {"ai_model": model_key}})
        bot.answer_callback_query(call.id, f"–ú–æ–¥–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞: {AI_PRESETS[model_key]['name']}")
        bot.send_message(chat_id, f"‚úÖ –ú–æ–¥–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞: *{AI_PRESETS[model_key]['name']}*")


    elif call.data == "take_subscription":
        user = call.from_user
        user_doc = users_collection.find_one({"user_id": user.id})
        if not user_doc.get("is_subscribed", False):
            subscribe(call.message)
            return
        unsubscribe(call.message)
        #–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏

    elif call.data == "choose_role":
        markup = create_role_keyboard()
        bot.edit_message_text(
            chat_id=chat_id,
            message_id=call.message.message_id,
            text="üé≠ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å:",
            reply_markup=markup
        )

    elif call.data.startswith("role_"):
        role_key = call.data[5:]
        users_collection.update_one({"user_id": user_id}, {"$set": {"role": role_key}})
        bot.answer_callback_query(call.id, f"–†–æ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞: {ROLE_PRESETS[role_key]['name']}")
        bot.send_message(chat_id, f"‚úÖ –†–æ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞: *{ROLE_PRESETS[role_key]['name']}*")

    elif call.data == "show_care_service":
        bot.answer_callback_query(call.id, "–°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏")
        # –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
@bot.message_handler(commands=["start"])
def send_welcome(message):    
    ensure_user_exists(message.from_user)
    markup = create_inline_menu(messages.INLINE_BUTTONS)
    bot.send_message(message.chat.id, messages.WELCOME_MESSAGE, reply_markup=markup)

#–ü–æ–¥–ø–∏—Å–∫–∞
@bot.message_handler(commands=["subscribe"])
def subscribe(message):
    user = message.from_user
    ensure_user_exists(user)

    users_collection.update_one(
        {"user_id": user.id},
        {"$set": {"is_subscribed": True}}
    )
    bot.send_message(message.chat.id, "‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –±–æ—Ç–∞!")

#–û—Ç–ø–∏—Å–∫–∞
@bot.message_handler(commands=["unsubscribe"])
def unsubscribe(message):
    user = message.from_user
    ensure_user_exists(user)
    
    users_collection.update_one(
        {"user_id": user.id},
        {"$set": {"is_subscribed": False}}
    )
    bot.send_message(message.chat.id, "‚ùå –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –±–æ—Ç–∞.")

@bot.message_handler(commands=["profile"])
def send_profile(message):
    user_id = message.from_user.id
    user_profile = get_user_info(user_id)

    response = "–í–∞—à–∞ –ø—Ä–æ—Ñ–∏–ª—å:\n"
    for item in user_profile:
        response += f"\nüîπ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {item['username']}\nüîπ –ü–æ–¥–ø–∏—Å–∫–∞: {item['is_subscribed']}\nüîπ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—å: {item['registered_at'].strftime("%Y-%m-%d")}\n"

    bot.send_message(message.chat.id, response)

@bot.message_handler(commands=["history"])
def send_history(message):
    user_id = message.from_user.id
    history = get_user_history(user_id)
    if not history:
        bot.send_message(message.chat.id, "–ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—É—Å—Ç–∞.")
        return

    response = "–í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è:\n"
    for item in history:
        response += f"\nüîπ {item['query']}\nü§ñ {item['response']}\n"

    bot.send_message(message.chat.id, response)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda message: True)
def handle_message(message):
    user = message.from_user
    chat_id = message.chat.id
    user_input = message.text
    ensure_user_exists(user)

    try:
        user_doc = users_collection.find_one({"user_id": user.id})
        if not user_doc.get("is_subscribed", False):
            bot.send_message(message.chat.id, "‚ö†Ô∏è –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /subscribe")
            return
        
        user_data = get_user_info(user.id)
        ai_preset = AI_PRESETS.get(user_data["ai_model"], AI_PRESETS["gpt4o"])
        role_preset = ROLE_PRESETS.get(user_data["role"], ROLE_PRESETS["default"])

        prompt = message.text
        full_prompt = f"{prompt}\n\n{user_input}"
        # –í—ã–∑–æ–≤ OpenAI –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç –∫–ª—é—á
        # response = openai.ChatCompletion.create(
        #     model="gpt-3.5-turbo",
        #     messages=[
        #         {"role": "system", "content": "–í—ã ‚Äî –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."},
        #         {"role": "user", "content": user_input}
        #     ]
        # )
        # ai_response = response.choices[0].message.content.strip() 



        # –≠–º—É–ª—è—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
        ai_response = f"""
ü§ñ –û—Ç–≤–µ—Ç –æ—Ç {ai_preset['name']} –≤ —Ä–æ–ª–∏ "{role_preset['name']}"\n\n{
        f'–¢–µ–º–∞: {prompt}\n\n'
        '–≠—Ç–æ —ç–º—É–ª—è—Ü–∏—è –Ω–µ–π—Ä–æ—Å–µ—Ç–∏.\n'
        '–ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ, —á—Ç–æ —ç—Ç–æ —Ä–µ–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç.'
    }"""

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
        save_query_to_history(user.id, user_input, ai_response)

        bot.send_message(message.chat.id, ai_response)
    except Exception as e:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏.")
        logger.info(e)

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
if __name__ == "__main__":
    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.polling(none_stop=True)
