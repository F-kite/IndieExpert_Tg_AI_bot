from telebot import types
import atexit
import logging
import openai
from openai import OpenAI
from bot_init import bot
from config import *
from database.client import get_user_info, get_current_prompt, save_query_to_history, ensure_user_exists
from handlers import callback_handlers, message_handlers
from utils.logger import get_logger
from utils.helpers import auto_delete_message
from utils.limits import check_ai_usage


callback_handlers.register_handlers(bot)
message_handlers.register_handlers(bot)
logger = get_logger(__name__)

@atexit.register
def shutdown_logger():
    logger.info("‚õî –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ò–ò
client_gpt = OpenAI(api_key=OPENAI_API_KEY)


# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ –∫–Ω–æ–ø–æ–∫ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞
def setup_bot_commands():
    bot.set_my_commands([
        types.BotCommand(cmd, desc) for cmd, desc in SIDE_BUTTONS.items()
    ])
setup_bot_commands()


# ---- –û–±—Ä–∞–±–æ—Ç—á–∫–∏–∫–∏ ----
@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    user_id = call.from_user.id

    if user_id == BOT_ID:
        logging.warning(f"‚ö†Ô∏è Callback –æ—Ç –±–æ—Ç–∞ ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è.\n`{ call.message.text}`")
        return


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
@bot.pre_checkout_query_handler(func=lambda q: True)
def checkout(pre_checkout_query):
    bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥—Ä—É–≥–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda message: True)
def cmd_handle_message(message):
    user = message.from_user
    chat_id = message.chat.id
    user_input = message.text
    ensure_user_exists(user)

    def get_key_by_name(name):
        for key, data in AI_PRESETS.items():
            if data.get("name") == name:
                return key
        return None  # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ

    try:
        user_data = get_user_info(user.id)
        ai_preset = AI_PRESETS.get(user_data["ai_model"], AI_PRESETS["gpt-4o"])
        ai_model = get_key_by_name(ai_preset["name"])
        
        role_prompt = get_current_prompt(user.id)
        user_prompt = user_input

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –∏ –ª–∏–º–∏—Ç—ã
        allowed, reason = check_ai_usage(user.id, user_data["ai_model"])
        if not allowed:
            msg = bot.send_message(chat_id, reason + ".\n\n–° –ø–æ–¥–ø–∏—Å–∫–æ–π –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ò–ò –∏—Å—á–µ–∑–Ω—É—Ç")
            auto_delete_message(chat_id, msg.message_id, 3)
            return

        # –†–µ–∞–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ gpt-3.5-turbo –∏–ª–∏ gpt-4o
        response = client_gpt.chat.completions.create(
            model=ai_model,
            messages=[
                {"role": "system", "content": role_prompt},
                {"role": "user", "content": user_prompt}
            ],
            temperature=ai_preset["temperature"],
            max_tokens=300,
            top_p=1.0,
            frequency_penalty=0.0,
            presence_penalty=0.0
        )

        ai_response = response.choices[0].message.content.strip()
        save_query_to_history(user.id, user_input, ai_response)
        bot.send_message(chat_id, ai_response)

    except openai.RateLimitError as e:
        msg = bot.send_message(chat_id, "‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –æ–±—Ä–∞—â–µ–Ω–∏–π –∫ OpenAI. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.")
        auto_delete_message(chat_id, msg.message_id, 3)
        logger.error(f"Rate limit error: {e}")

    except openai.APIError as e:
        msg = bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏.")
        auto_delete_message(chat_id, msg.message_id, 3)
        logger.error(f"OpenAI API error: {e}")

    except Exception as e:
        msg = bot.send_message(chat_id, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏.")
        auto_delete_message(chat_id, msg.message_id, 3)
        logger.error(f"–û—à–∏–±–∫–∞: {e}")


# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
if __name__ == "__main__":
    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.polling(none_stop=True)

