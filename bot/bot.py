import telebot
from telebot import types
from telebot.types import LabeledPrice
from pymongo import MongoClient
from datetime import datetime, timedelta
from dotenv import load_dotenv
from states import BotStates
import openai
from openai import OpenAI
import atexit
import logging
import threading
import sys
import os

import bot.config.messages as messages
import bot.buttons as buttons
from presets.roles import ROLE_PRESETS
from presets.models import AI_PRESETS

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
MONGODB_BOT_URI = os.getenv("MONGODB_BOT_URI")
MONGODB_DB_NAME = os.getenv("MONGODB_DB_NAME")
ADMINS = [int(x.strip()) for x in os.getenv("TELEGRAM_ADMINS_ID", "").split(",") if x.strip()]
SUBSCRIPTION_PRICE=os.getenv("SUBSCRIPTION_PRICE")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

# –¢–µ–∫—Å—Ç–∞
WELCOME_MESSAGE = messages.WELCOME_MESSAGE
AI_MENU_MESSAGE = messages.AI_MENU_MESSAGE
ROLE_MENU_MESSAGE = messages.ROLE_MENU_MESSAGE
SUBSCRIPTION_MESSAGE = messages.SUBSCRIPTION_MESSAGE
HISTORY_MESSAGE = messages.HISTORY_MESSAGE
CLEAR_DIALOG_MESSAGE = messages.CLEAR_DIALOG_MESSAGE
POLICY_MESSAGE = messages.POLICY_MESSAGE

# –ü–∞–Ω–µ–ª—å –∫–Ω–æ–ø–æ–∫
SIDE_BUTTONS = buttons.SIDE_BUTTONS
INLINE_BUTTONS = buttons.INLINE_BUTTONS
AI_MODELS_BUTTONS = buttons.AI_MODELS_BUTTONS

BACK_BUTTON = types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(TELEGRAM_TOKEN)
BOT_ID = bot.get_me().id

user_states = {}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ò–ò
client_gpt = OpenAI(api_key=OPENAI_API_KEY)

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π ---
LOGS_DIR = "../logs"
os.makedirs(LOGS_DIR, exist_ok=True)

LOG_FILE = os.path.join(LOGS_DIR, "app.log")

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[
        logging.FileHandler(LOG_FILE, encoding='utf-8'),
        logging.StreamHandler()  # –õ–æ–≥–∏ —Ç–∞–∫–∂–µ –±—É–¥—É—Ç –≤—ã–≤–æ–¥–∏—Ç—å—Å—è –≤ –∫–æ–Ω—Å–æ–ª—å
    ]
)

logger = logging.getLogger(__name__)

def handle_exception(exc_type, exc_value, exc_traceback):
    if issubclass(exc_type, KeyboardInterrupt):
        # –í—ã–∑–æ–≤—ã Ctrl+C –Ω–µ –ª–æ–≥–∏—Ä—É–µ–º
        return sys.__excepthook__(exc_type, exc_value, exc_traceback)
    
    logging.error("–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ", exc_info=(exc_type, exc_value, exc_traceback))

# –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
sys.excepthook = handle_exception

@atexit.register
def shutdown_logger():
    logger.info("‚õî –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

# -------------------------------

def setup_bot_commands():
    bot.set_my_commands([
        types.BotCommand(cmd, desc) for cmd, desc in SIDE_BUTTONS.items()
    ])

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ –∫–Ω–æ–ø–æ–∫ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞
setup_bot_commands()

# --- –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB ---
 
client = MongoClient(MONGODB_BOT_URI)
db = client[MONGODB_DB_NAME]
users_collection = db["users"]
history_collection = db["history"]

def test_mongo_connection():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB."""
    try:
        # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ë–î
        client.admin.command('ping')
        logger.info("‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.")
        return True
    except Exception as e:
        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è: {e}")
        return False
if not test_mongo_connection():
    logger.error("‚õî –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞. –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
    exit(1)

# -----------------------------

# –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
def ensure_user_exists(user):
    # –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user.id == BOT_ID:
        return

    now = datetime.now()
    user_doc = users_collection.find_one({"user_id": user.id})

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–≥–æ
    if not user_doc:
        request_limits = {}
        for key in AI_PRESETS.keys():
            request_limits[key] = {"count": 0, "last_reset": now}

        user_data = {
            "user_id": user.id,
            "first_name": user.first_name,
            "username": user.username,
            "registered_at": now,
            "last_seen": now,
            "is_subscribed": False,
            "subscription_start":"",
            "subscription_end": "",
            "ai_model": "gpt-4o",
            "role": "default",
            "custom_prompt":"",
            "request_limits": request_limits
        }
        users_collection.insert_one(user_data)
    else:
        is_subscribed = user_doc.get("is_subscribed", False)

        if not is_subscribed:
           users_collection.update_one(
            {"user_id": user.id},
            {"$set": {"ai_model": "gpt-4o", "role":"default"}}
        )
           
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ª–∏–º–∏—Ç—ã –≤ –Ω–∞—á–∞–ª–µ –Ω–æ–≤–æ–≥–æ –º–µ—Å—è—Ü–∞
        if user_doc.get("last_month", None) != now.month:
            users_collection.update_one(
                {"user_id": user.id},
                {
                    "$set": {
                        "last_month": now.month,
                        "monthly_usage": {model_key: 0 for model_key in AI_PRESETS.keys()}
                    }
                }
            )
           
        # –ï—Å–ª–∏ –µ—Å—Ç—å ‚Äî –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ last_seen
        users_collection.update_one(
            {"user_id": user.id},
            {"$set": {"last_seen": now}}
        )

def save_query_to_history(user_id, query, response):
    history_collection.insert_one({
        "user_id": user_id,
        "query": query,
        "response": response,
        "timestamp": datetime.now()
    })

def get_user_history(user_id):
    return list(history_collection.find({"user_id": user_id}, {"_id": 0}))

def is_user_subscribed(user_id):
    user_data = users_collection.find_one({"user_id": user_id})
    if not user_data:
        return False
    
    # –ê–¥–º–∏–Ω—ã –≤—Å–µ–≥–¥–∞ –ø–æ–¥–ø–∏—Å–∞–Ω—ã
    if user_id in ADMINS:
        return True

    return user_data.get("is_subscribed", False)

def clear_user_history(user_id):
    result = history_collection.delete_many({"user_id": user_id})
    logger.info(f"üßπ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—á–∏—Å—Ç–∏–ª —Å–≤–æ—é –∏—Å—Ç–æ—Ä–∏—é –∑–∞–ø—Ä–æ—Å–æ–≤.")
    return result.deleted_count

def get_user_info(user_id):
    return users_collection.find_one({"user_id": user_id})

def auto_delete_message(chat_id, message_id, delay=5):
    def delete():
        try:
            bot.delete_message(chat_id, message_id)
        except Exception as e:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ {message_id}: {e}")
    
    timer = threading.Timer(delay, delete)
    timer.start()

def safe_edit_message(bot, chat_id, message_id, text, reply_markup=None, parse_mode=None):
    try:
        bot.edit_message_text(
            text=text,
            chat_id=chat_id,
            message_id=message_id,
            reply_markup=reply_markup,
            parse_mode=parse_mode
        )
    except telebot.apihelper.ApiTelegramException as e:
        if "message is not modified" in str(e):
            # –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å ‚Äî –Ω–∏—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ
            return False
        else:
            raise  # –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ ‚Äî –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–ª—å—à–µ
    return True

def get_current_prompt(user_id):
    user_data = get_user_info(user_id)
    role_key = user_data.get("role", "default")
    custom_prompt = user_data.get("custom_prompt", "")

    if role_key == "custom" and custom_prompt:
        return custom_prompt
    else:
        preset = ROLE_PRESETS.get(role_key, ROLE_PRESETS["default"])
        return preset["prompt"]
    
def check_ai_usage(user_id, ai_model_key):
    now = datetime.now()
    user_data = get_user_info(user_id)
    is_subscribed = user_data.get("is_subscribed", False)

    if is_subscribed:
        return True, ""

    limits = user_data.get("request_limits", {})
    model_limit = limits.get(ai_model_key, {"count": 0, "last_reset": now})

    # –°–±—Ä–æ—Å –ª–∏–º–∏—Ç–∞, –µ—Å–ª–∏ –Ω–∞—á–∞–ª—Å—è –Ω–æ–≤—ã–π –º–µ—Å—è—Ü
    last_reset = model_limit["last_reset"]
    if last_reset.month != now.month or last_reset.year != now.year:
        model_limit["count"] = 0
        model_limit["last_reset"] = now
        users_collection.update_one(
            {"user_id": user_id},
            {"$set": {f"request_limits.{ai_model_key}": model_limit}}
        )

    if model_limit["count"] >= 2:
        return False, f"‚ùå –õ–∏–º–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è {AI_PRESETS[ai_model_key]['name']} –∏—Å—á–µ—Ä–ø–∞–Ω"

    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
    users_collection.update_one(
        {"user_id": user_id},
        {"$inc": {f"request_limits.{ai_model_key}.count": 1}}
    )

    return True, ""
    
def extract_russian_text(text):
    start_index = None
    for i, char in enumerate(text):
        if '–ê' <= char.upper() <= '–Ø' or char.lower() in '–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è':
            start_index = i
            break
    if start_index is not None:
        return text[start_index:]
    return ""

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
def create_inline_menu(buttons):
    markup = types.InlineKeyboardMarkup()
    buttons_list = list(buttons.items())

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–µ –¥–≤–µ –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
    if len(buttons_list) >= 2:
        first_key, first_label = buttons_list[0]
        second_key, second_label = buttons_list[1]

        if first_key.startswith("http"):
            btn1 = types.InlineKeyboardButton(first_label, url=first_key)
        else:
            btn1 = types.InlineKeyboardButton(first_label, callback_data=first_key)

        if second_key.startswith("http"):
            btn2 = types.InlineKeyboardButton(second_label, url=second_key)
        else:
            btn2 = types.InlineKeyboardButton(second_label, callback_data=second_key)

        markup.row(btn1, btn2)

    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –ø–æ –æ–¥–Ω–æ–π
    for key, label in buttons_list[2:]:
        if key.startswith("http"):
            markup.add(types.InlineKeyboardButton(label, url=key))
        else:
            markup.add(types.InlineKeyboardButton(label, callback_data=key))

    return markup

def create_ai_keyboard(user_id):
    markup = types.InlineKeyboardMarkup()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –º–æ–¥–µ–ª—å –∏–∑ –ë–î
    user_data = get_user_info(user_id)
    current_model_key = user_data.get("ai_model", "gpt-4o")
    is_subscribed = user_data.get("is_subscribed", False)

    models = list(AI_PRESETS.items())
    for i in range(0, len(models), 2):
        row = []
        for key, data in models[i:i+2]:
            model_name = data["name"]
            
            if not is_subscribed and key != "gpt-4o":
                # –î–ª—è –Ω–µ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ, –∫—Ä–æ–º–µ gpt-4o
                btn = types.InlineKeyboardButton(f"üîí {model_name}", callback_data="locked_ai")
            else:
                if key == current_model_key:
                    # –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–∞–ª–æ—á–∫—É
                    btn = types.InlineKeyboardButton(f"‚úÖ {model_name}", callback_data=f"ai_{key}")
                else:
                    # –î—Ä—É–≥–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
                    btn = types.InlineKeyboardButton(f"{model_name}", callback_data=f"ai_{key}")
                
            row.append(btn)
        
        markup.row(*row)

    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    back_button = types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
    markup.add(back_button)

    return markup

def create_role_keyboard(user_id):
    markup = types.InlineKeyboardMarkup()

    user_data = get_user_info(user_id)
    current_role_key = user_data.get("role", "default")
    is_subscribed = user_data.get("is_subscribed", False)

    roles = list(ROLE_PRESETS.items())

    for i in range(0, len(roles), 2):
        row = []
        for key, data in roles[i:i+2]:
            role_name = data["name"]
            
            if not is_subscribed and key != "default":
                # –î–ª—è –Ω–µ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ, –∫—Ä–æ–º–µ default
                btn = types.InlineKeyboardButton(f"üîí {extract_russian_text(role_name)}", callback_data="locked_ai")
            else:
                if key == current_role_key:
                    # –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—É—â–∞—è —Ä–æ–ª—å ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–∞–ª–æ—á–∫—É
                    btn = types.InlineKeyboardButton(f"‚úÖ {extract_russian_text(role_name)}", callback_data=f"role_{key}")
                else:
                    # –î—Ä—É–≥–∏–µ —Ä–æ–ª–∏ –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
                    btn = types.InlineKeyboardButton(f"{role_name}", callback_data=f"role_{key}")
                
            row.append(btn)
    
        markup.row(*row)

    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    back_button = types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
    markup.add(back_button)

    return markup

def create_payment_keyboard():
    markup = types.InlineKeyboardMarkup()
    btn = types.InlineKeyboardButton(f"üí≥ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –∑–∞ {SUBSCRIPTION_PRICE} ‚≠ê", pay=True)
    markup.add(btn)
    return markup

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback'–æ–≤ ---
@bot.callback_query_handler(func=lambda call: call.data == "back_to_main")
def handle_back_to_main(call):
    chat_id = call.message.chat.id
    message_id = call.message.message_id

    markup = create_inline_menu(INLINE_BUTTONS)

    bot.edit_message_text(
        chat_id=chat_id,
        message_id=message_id,
        text=WELCOME_MESSAGE,
        reply_markup=markup
    )
    bot.answer_callback_query(call.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

@bot.callback_query_handler(func=lambda call: call.data == "choose_ai")
def handle_choose_ai(call):
    chat_id = call.message.chat.id
    user_id = call.from_user.id
    user_doc = users_collection.find_one({"user_id": user_id})

    if not user_doc:
        ensure_user_exists(call.from_user)
        user_doc = users_collection.find_one({"user_id": user_id})

    markup = create_ai_keyboard(user_id)
    bot.edit_message_text(
        chat_id=chat_id,
        message_id=call.message.message_id,
        text=AI_MENU_MESSAGE,
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data == "choose_role")
def handle_choose_role(call):
    chat_id = call.message.chat.id
    user_id = call.from_user.id
    markup = create_role_keyboard(user_id)
    bot.edit_message_text(
        chat_id=chat_id,
        message_id=call.message.message_id,
        text=ROLE_MENU_MESSAGE,
        reply_markup=markup,
        parse_mode="Markdown"
    )

@bot.callback_query_handler(func=lambda call: call.data == "confirm_clear")
def handle_confirm_clear(call):
    user = call.from_user
    deleted_count = clear_user_history(user.id)

    bot.answer_callback_query(call.id, "–ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞")
    bot.send_message(call.message.chat.id, f"üóëÔ∏è –ò—Å—Ç–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞. –£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {deleted_count}")

#–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
@bot.callback_query_handler(func=lambda call:call.data == "subscribe" )
def handle_subscribe(call):
    text = f"""üåü –ü–æ–¥–ø–∏—Å–∫–∞ —Å—Ç–æ–∏—Ç –≤—Å–µ–≥–æ {SUBSCRIPTION_PRICE} ‚≠ê –≤ –º–µ—Å—è—Ü.
–û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –ò–ò –∏ —Ä–æ–ª—è–º.
–°—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏ 30 –¥–Ω–µ–π. 
/subscribe"""
    msg = bot.send_message(call.message.chat.id, text)
    auto_delete_message(call.message.chat.id, msg.message_id)

# –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
@bot.callback_query_handler(func=lambda call:call.data == "show_care_service" )
def handle_show_care_service(call):
    bot.answer_callback_query(call.id, "–°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏")

@bot.callback_query_handler(func=lambda call:call.data == "show_profile" )
def handle_show_profile(call):
    chat_id = call.message.chat.id
    user_id = call.from_user.id
    message_id = call.message.message_id

    user_profile = get_user_info(user_id)
    markup = types.InlineKeyboardMarkup()

    if not user_profile:
        # bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        msg = bot.send_message(chat_id, "‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        auto_delete_message(chat_id, msg.message_id)
        return
    
    model_name = AI_PRESETS.get(user_profile.get("ai_model", "default"), {}).get("name","–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å")
    role_name = ROLE_PRESETS.get(user_profile.get("role", "default"), {}).get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å")
    
    text = f"""
üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:

üîπ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_profile.get('username')}
üîπ –ü–æ–¥–ø–∏—Å–∫–∞: {"‚úÖ" if user_profile.get("is_subscribed", False) else "‚ùå"}
üîπ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user_profile.get("registered_at").strftime("%Y-%m-%d")}
üîπ –¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å –ò–ò: {model_name}
üîπ –¢–µ–∫—É—â–∞—è —Ä–æ–ª—å –±–æ—Ç–∞: {extract_russian_text(role_name)}
"""
    
    back_btn = types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
    markup.add(back_btn)

    bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=text, reply_markup=markup)
    bot.answer_callback_query(call.id, "–ü—Ä–æ—Ñ–∏–ª—å")

@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    chat_id = call.message.chat.id
    user_id = call.from_user.id

    if user_id == BOT_ID:
        logging.warning(f"‚ö†Ô∏è Callback –æ—Ç –±–æ—Ç–∞ ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è.\n`{ call.message.text}`")
        return

    elif call.data.startswith("ai_"):
        model_key = call.data[3:]
        model_data = AI_PRESETS.get(model_key)
        user_doc = users_collection.find_one({"user_id": user_id})
        is_subscribed = user_doc.get("is_subscribed", False)

        if not is_subscribed and model_key != "gpt-4o":
            msg = bot.send_message(chat_id, "‚ùóÔ∏è–ü–æ–¥–ø–∏—à–∏—Å—å, —á—Ç–æ–±—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —ç—Ç—É –º–æ–¥–µ–ª—å")
            auto_delete_message(chat_id, msg.message_id)
            return
        
        if model_key == get_user_info(user_id).get("ai_model"):
            bot.answer_callback_query(call.id, "‚úÖ –ú–æ–¥–µ–ª—å —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞")
            return

        users_collection.update_one({"user_id": user_id}, {"$set": {"ai_model": model_key}})
        description = model_data["description"]
        name = model_data["name"]

        text = f"""
üß† *{name}*

‚ÑπÔ∏è _{description}_
"""
        
        users_collection.update_one({"user_id": user_id}, {"$set": {"ai_model": model_key}})
        bot.answer_callback_query(call.id, f"–í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å {AI_PRESETS[model_key]['name']}")
        try:
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text=text,
                reply_markup=create_ai_keyboard(user_id),
                parse_mode="Markdown"
            )
        except telebot.apihelper.ApiTelegramException as e:
            if "message is not modified" in str(e):
                return
            else:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

    elif call.data.startswith("role_"):
        role_key = call.data[5:]
        role_data = ROLE_PRESETS.get(role_key)
        user_doc = users_collection.find_one({"user_id": user_id})
        is_subscribed = user_doc.get("is_subscribed", False)

        if not is_subscribed and role_key != "default":
            msg = bot.send_message(chat_id, "‚ùóÔ∏è–ü–æ–¥–ø–∏—à–∏—Å—å, —á—Ç–æ–±—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —ç—Ç—É —Ä–æ–ª—å")
            auto_delete_message(chat_id, msg.message_id)
            return
        
        if role_key == get_user_info(user_id).get("role"):
            bot.answer_callback_query(call.id, "‚úÖ –†–æ–ª—å —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞")
            return
        
        if role_key == "custom":
            cmd_custom_role(call.message)
            return
        else:
            users_collection.update_one({"user_id": user_id}, {"$set": {"role": role_key}})
            description = role_data["description"]
            name = role_data["name"]

            text = f"""
*{name}*

‚ÑπÔ∏è _{description}_
    """
              
            bot.answer_callback_query(call.id, f"–í—ã–±—Ä–∞–Ω–∞ —Ä–æ–ª—å {name}")
        try:
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text=text,
                reply_markup=create_role_keyboard(user_id),
                parse_mode="Markdown"
            )
        except telebot.apihelper.ApiTelegramException as e:
            if "message is not modified" in str(e):
                return
            else:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")



# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---
@bot.message_handler(commands=["start"])
def cmd_send_welcome(message):    
    ensure_user_exists(message.from_user)
    markup = create_inline_menu(INLINE_BUTTONS)
    bot.send_message(message.chat.id, WELCOME_MESSAGE, reply_markup=markup)

@bot.message_handler(commands=["profile"])
def cmd_send_profile(message):
    user_id = message.from_user.id
    user_profile = get_user_info(user_id)
    is_admin =  ""
    if user_id in ADMINS : is_admin = "üîÜ –¶–∞—Ä—å –∏ –±–æ–≥ (–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä)"

    if not user_profile:
        msg = bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        auto_delete_message(message.chat.id, msg.message_id)
        return
    
    response = f"""
üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:

üîπ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_profile.get('username')}
üîπ –ü–æ–¥–ø–∏—Å–∫–∞: {"‚úÖ" if user_profile.get("is_subscribed", False) else "‚ùå"}
üîπ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user_profile.get("registered_at").strftime("%Y-%m-%d")}
üîπ –¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å –ò–ò: {user_profile.get("ai_model", "–Ω–µ –≤—ã–±—Ä–∞–Ω–∞")}
üîπ –¢–µ–∫—É—â–∞—è —Ä–æ–ª—å –±–æ—Ç–∞: {ROLE_PRESETS.get(user_profile.get("role", "default"), {}).get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å")}
"""
    if is_admin:
        response += f"\n{is_admin}"

    bot.send_message(message.chat.id, response)

@bot.message_handler(commands=["choose_ai"])
def cmd_choose_ai(message):
    user = message.from_user
    user_id = user.id
    ensure_user_exists(user)
    
    user_data = get_user_info(user_id)
    if not user_data.get("is_subscribed", False) and AI_PRESETS[user_data.get("ai_model", "gpt-4o")] != "gpt-4o":
        msg = bot.send_message(message.chat.id, "üîí –ù—É–∂–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å")
        auto_delete_message(message.chat.id, msg.message_id)
        return
    
    markup = create_ai_keyboard(user_id)
    bot.send_message(message.chat.id, AI_MENU_MESSAGE, reply_markup=markup)

@bot.message_handler(commands=["choose_role"])
def cmd_choose_role(message):
    user = message.from_user
    user_id = user.id
    ensure_user_exists(user)

    user_data = get_user_info(user_id)
    if not user_data.get("is_subscribed", False):
        
        msg = bot.send_message(
            message.chat.id,
            "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º.\n–î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /subscribe"
        )
        auto_delete_message(message.chat.id, msg.message_id)
        return

    markup = create_role_keyboard(user_id)
    bot.send_message(message.chat.id, ROLE_MENU_MESSAGE, reply_markup=markup, parse_mode="Markdown")

# --- –ü–æ–¥–ø–∏—Å–∫–∞ \ –æ—Ç–ø–∏—Å–∫–∞  ---
@bot.message_handler(commands=["subscribe"])
def cmd_subscribe(message):
    user = message.from_user
    user_id = user.id
    chat_id = message.chat.id
    ensure_user_exists(user)

    if is_user_subscribed(user_id):
        msg = bot.send_message(
            message.chat.id,
            "üîÜ –í—ã —É–∂–µ –æ—Ñ–æ—Ä–º–∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É, –≤—Ç–æ—Ä–∞—è –Ω–µ –ø—Ä–∏–Ω–µ—Å–µ—Ç –Ω–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π"
        )
        auto_delete_message(message.chat.id, msg.message_id)
        return

    if user_id in ADMINS:
        users_collection.update_one(
            {"user_id": user_id},
            {"$set": {"is_subscribed": True, "subscription_end": None}}  # –ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        )
        msg = bot.send_message(message.chat.id, "üëë –í—ã ‚Äî –∞–¥–º–∏–Ω. –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –Ω–∞–≤—Å–µ–≥–¥–∞.")
        auto_delete_message(message.chat.id, msg.message_id)
        return

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–∫—É–ø–∫—É —á–µ—Ä–µ–∑ @invoice
    title = "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –±–æ—Ç–∞"
    description = "‚ÄºÔ∏è –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ—Ç –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Ä–µ–¥—Å—Ç–≤ –≤ –±—É–¥—É—â–µ–º"
    payload = f"sub_{user_id}_{int(datetime.now().timestamp())}"
    currency = "XTR"
    provider_token=""
    prices = [LabeledPrice(label="–ï–∂–µ–º–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞", amount=SUBSCRIPTION_PRICE)]
    # photo_url = "https://example.com/subscription_image.jpg "  # –ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ

    bot.send_invoice(
            chat_id,
            title=title,
            description=description,
            invoice_payload=payload,
            currency=currency,
            prices=prices,
            provider_token=provider_token,
            # photo_url=photo_url,
            is_flexible=False,
            allow_paid_broadcast=True,  # –†–∞–∑—Ä–µ—à–∞–µ–º –æ–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ Stars
            reply_markup=create_payment_keyboard()
        )

@bot.message_handler(commands=["unsubscribe"])
def cmd_unsubscribe(message):
    user = message.from_user
    user_id = user.id
    ensure_user_exists(user)
    
    users_collection.update_one(
        {"user_id": user_id},
        {"$set": {"is_subscribed": False}}
    )
    bot.send_message(message.chat.id, "‚ùå –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –±–æ—Ç–∞.")


# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ ---
@bot.pre_checkout_query_handler(func=lambda q: True)
def checkout(pre_checkout_query):
    bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)

@bot.message_handler(content_types=["successful_payment"])
def handle_successful_payment(message):
    user_id = message.from_user.id
    payment_info = message.successful_payment
    logger.info(f"üí∞ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ–ø–ª–∞—Ç–∏–ª –ø–æ–¥–ø–∏—Å–∫—É: {payment_info.total_amount} {payment_info.currency}")

    users_collection.update_one(
        {"user_id": user_id},
        {
            "$set": {
                "is_subscribed": True,
                "subscription_start": datetime.now(),
                "subscription_end": datetime.now() + timedelta(days=30)
            }
        }
    )
    bot.send_message(message.chat.id, "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ 30 –¥–Ω–µ–π!")

# --- ---------------------------- ---

@bot.message_handler(commands=["history"])
def cmd_send_history(message):
    user_id = message.from_user.id
    history = get_user_history(user_id)
    if not history:
        msg =bot.send_message(message.chat.id, "–ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—É—Å—Ç–∞.")
        auto_delete_message(message.chat.id, msg.message_id)
        return

    response = f"{HISTORY_MESSAGE}\n\n"
    for item in history:
        response += f"\nüîπ {item['query']}\nü§ñ {item['response']}\n"

    bot.send_message(message.chat.id, response)

@bot.message_handler(commands=["clear_history"])
def cmd_confirm_clear_history(message):
    markup = types.InlineKeyboardMarkup()
    confirm_btn = types.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_clear")
    back_btn = types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="back_to_main")
    markup.row(confirm_btn, back_btn)
    text = "‚ö†Ô∏è –ü–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –≤—ã –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ –ø–æ—Ç–µ—Ä—è–µ—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç–∏—å –≤–∞—à–∏ —Å—Ç–∞—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã.\n–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∑–∞–ø—Ä–æ—Å–æ–≤?"

    bot.send_message(message.chat.id, CLEAR_DIALOG_MESSAGE, reply_markup=markup)

@bot.message_handler(commands=["policy"])
def cmd_send_policy(message):
    bot.send_message(message.chat.id, POLICY_MESSAGE, parse_mode="Markdown")

@bot.message_handler(commands=["custom_role"])
def cmd_custom_role(message):
    msg =  bot.send_message(message.chat.id, "‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    auto_delete_message(message.chat.id, msg.message_id)
    return
    user = message.from_user
    ensure_user_exists(user)
    user_id = user.id

    users_collection.update_one(
        {"user_id": user_id},
        {"$set": {"role": "custom"}}
    )

    bot.send_message(message.chat.id, """
‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç.
–ü—Ä–∏–º–µ—Ä:
"–í—ã ‚Äî –ª–∏—á–Ω—ã–π –∫–æ—É—á, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –ª—é–¥—è–º –Ω–∞—Ö–æ–¥–∏—Ç—å —Å–µ–±—è –∏ –º–µ–Ω—è—Ç—å –∂–∏–∑–Ω—å."

–í–∞—à –ø—Ä–æ–º–ø—Ç:
""")
    user_states[user_id] = "waiting_for_custom_prompt"

@bot.message_handler(func=lambda m: user_states.get(m.from_user.id) == "waiting_for_custom_prompt")
def handle_custom_prompt(message):
    user_id = message.from_user.id
    user_input = message.text.strip()

    if not user_input:
        msg = bot.send_message(message.chat.id, "‚ö†Ô∏è –ü—Ä–æ–º–ø—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        auto_delete_message(message.chat.id, msg.message_id)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    users_collection.update_one(
        {"user_id": user_id},
        {"$set": {"custom_prompt": user_input}}
    )

    # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ä–µ–∂–∏–º–∞ –æ–∂–∏–¥–∞–Ω–∏—è
    user_states.pop(user_id, None)

    msg = bot.send_message(message.chat.id, f"‚úÖ –í–∞—à –Ω–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:\n\n*{user_input}*", parse_mode="Markdown")
    auto_delete_message(message.chat.id, msg.message_id)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥—Ä—É–≥–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda message: True)
def cmd_handle_message(message):
    user = message.from_user
    chat_id = message.chat.id
    user_input = message.text
    ensure_user_exists(user)

    def get_key_by_name(name):
        for key, data in AI_PRESETS.items():
            if data.get("name") == name:
                return key
        return None  # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ



    try:
        user_data = get_user_info(user.id)
        ai_preset = AI_PRESETS.get(user_data["ai_model"], AI_PRESETS["gpt-4o"])
        ai_model = get_key_by_name(ai_preset["name"])
        
        role_prompt = get_current_prompt(user.id)
        user_prompt = user_input

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –∏ –ª–∏–º–∏—Ç—ã
        allowed, reason = check_ai_usage(user.id, user_data["ai_model"])
        if not allowed:
            msg = bot.send_message(chat_id, reason + ".\n\n–° –ø–æ–¥–ø–∏—Å–∫–æ–π –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ò–ò –∏—Å—á–µ–∑–Ω—É—Ç")
            auto_delete_message(chat_id, msg.message_id, 3)
            return

        # –†–µ–∞–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ gpt-3.5-turbo –∏–ª–∏ gpt-4o
        response = client_gpt.chat.completions.create(
            model=ai_model,
            messages=[
                {"role": "system", "content": role_prompt},
                {"role": "user", "content": user_prompt}
            ],
            temperature=ai_preset["temperature"],
            max_tokens=300,
            top_p=1.0,
            frequency_penalty=0.0,
            presence_penalty=0.0
        )

        ai_response = response.choices[0].message.content.strip()
        save_query_to_history(user.id, user_input, ai_response)
        bot.send_message(chat_id, ai_response)

    except openai.RateLimitError as e:
        msg = bot.send_message(chat_id, "‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –æ–±—Ä–∞—â–µ–Ω–∏–π –∫ OpenAI. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.")
        auto_delete_message(chat_id, msg.message_id, 3)
        logger.error(f"Rate limit error: {e}")

    except openai.APIError as e:
        msg = bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏.")
        auto_delete_message(chat_id, msg.message_id, 3)
        logger.error(f"OpenAI API error: {e}")

    except Exception as e:
        msg = bot.send_message(chat_id, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏.")
        auto_delete_message(chat_id, msg.message_id, 3)
        logger.error(f"–û—à–∏–±–∫–∞: {e}")



# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
if __name__ == "__main__":
    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.polling(none_stop=True)
