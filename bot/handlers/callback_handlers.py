from telebot import types
from telebot.types import CallbackQuery
from config import *
from database.client import *
from utils.helpers import safe_edit_message, auto_delete_message, extract_russian_text
from utils.history_pages import show_history_page
from utils.logger import get_logger
from handlers.admin_handlers import *
from utils.keyboards import *


logger = get_logger(__name__)


def register_handlers(bot, ai_handlers):
    @bot.callback_query_handler(func=lambda call: call.data == "back_to_main")
    async def handle_back_to_main(call: CallbackQuery):
        chat_id = call.message.chat.id
        message_id = call.message.message_id
        markup = create_inline_menu(INLINE_BUTTONS)
        await ensure_user_exists(call.from_user)

        await bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text=WELCOME_MESSAGE,
            reply_markup=markup
        )
        await bot.answer_callback_query(call.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")


    @bot.callback_query_handler(func=lambda call:call.data == "show_profile" )
    async def handle_show_profile(call: CallbackQuery):
        chat_id = call.message.chat.id
        user_id = call.from_user.id
        message_id = call.message.message_id
        await ensure_user_exists(call.from_user)
        try:
            user_profile = await get_user_info(user_id)
            markup = types.InlineKeyboardMarkup()
            is_admin =  ""

            if user_id in ADMINS : is_admin = "üîÜ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"

            if not user_profile:
                msg = await bot.send_message(chat_id, "‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                await auto_delete_message(bot, chat_id, msg.message_id)
                return
            
            model_name = AI_PRESETS.get(user_profile.get("ai_model", "gpt-4o"), {}).get("name","–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å")
            role_name = ROLE_PRESETS.get(user_profile.get("role", "tarot_reader"), {}).get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å")

            response = f"""
üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <code>{user_profile.get('username')} </code>
{is_admin}

üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: <i>{user_profile.get("registered_at").strftime("%Y-%m-%d")}</i>
üí∏ –ü–æ–¥–ø–∏—Å–∫–∞: {"‚úÖ" if user_profile.get("is_subscribed", False) else "‚ùå"}

üß† –¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å –ò–ò: <i>{model_name}</i>
üé≠ –¢–µ–∫—É—â–∞—è —Ä–æ–ª—å –±–æ—Ç–∞: <i>{extract_russian_text(role_name)}</i>
        """
            if is_admin:
                response += f"\n*Ô∏è‚É£ –ï—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–æ–º–∞–Ω–¥–µ /admin"

            stat_btn= types.InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="user_statistics")
            back_btn = types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
            markup.add(stat_btn)
            markup.add(back_btn)

            await bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text=response,
                reply_markup=markup,
                parse_mode="HTML"
            )
            await bot.answer_callback_query(call.id, "–ü—Ä–æ—Ñ–∏–ª—å")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            await bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è")


    @bot.callback_query_handler(func=lambda call: call.data == "user_statistics")
    async def handle_user_statistics(call: CallbackQuery):
        chat_id = call.message.chat.id
        message_id = call.message.message_id
        user_id = call.from_user.id
        await ensure_user_exists(call.from_user)

        try:
            user_profile = await get_user_info(user_id)
            markup = types.InlineKeyboardMarkup()

            profile_btn= types.InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="show_profile")
            back_btn = types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
            markup.add(profile_btn)
            markup.add(back_btn)

            monthly_usage = user_profile.get("monthly_usage", {})
            response = ""
            if not monthly_usage:
                response = "‚ÑπÔ∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞ –ø—É—Å—Ç–∞. –°–∞–º–æ–µ –≤—Ä–µ–º—è –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º üòâ"
            else:
                response = f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü:\n\n"
                for model, count in monthly_usage.items():
                    ai_model = AI_PRESETS.get(model, {}).get("name", "‚ÑπÔ∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å")
                    response += f"‚ñ´Ô∏è {ai_model} : <b>{count}</b>\n"

            await bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text=response,
                reply_markup=markup,
                parse_mode="HTML"
            )
            await bot.answer_callback_query(call.id, "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤")
        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            await bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
            msg = await bot.send_message(chat_id, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
            await auto_delete_message(bot, chat_id, msg.message_id, delay=5)


    @bot.callback_query_handler(func=lambda call: call.data == "speech_settings")
    async def handle_speech_settings(call: CallbackQuery):
        chat_id = call.message.chat.id
        user_id = call.from_user.id
        message_id = call.message.message_id
        await ensure_user_exists(call.from_user)
        user_doc = await get_user_info(user_id)
        is_subscribed = user_doc.get("is_subscribed", False)
        try:
            if not is_subscribed:
                msg = await bot.send_message(chat_id, "‚ùóÔ∏è–ü–æ–¥–ø–∏—à–∏—Å—å, —á—Ç–æ–±—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é")
                await auto_delete_message(bot, chat_id, msg.message_id)
                return    
            
            markup = await create_voice_settings_keyboard(user_id)

            response = TTS_SETTING_MESSAGE

            await bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text=response,
                reply_markup=markup,
                parse_mode="HTML"
            )

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            await bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫")


    @bot.callback_query_handler(func=lambda call: call.data == "toggle_process_voice")
    async def handle_speech_settings(call: CallbackQuery):
        chat_id = call.message.chat.id
        user_id = call.from_user.id
        message_id = call.message.message_id

        user_data = await get_user_info(user_id)
        tts_settings = user_data.get("tts_settings", {})
        process_voice_messages = tts_settings.get("process_voice_messages", False)
        reply_voice_messages = tts_settings.get("reply_voice_messages", False)
        new_process_voice_messages = not process_voice_messages
            
        await users_collection.update_one(
            {"user_id": user_id},
            {
                "$set": {
                    "tts_settings.process_voice_messages": new_process_voice_messages,
                    "tts_settings.reply_voice_messages": reply_voice_messages
                }
            }
        )


        response = TTS_SETTING_MESSAGE

        markup =  await create_voice_settings_keyboard(user_id)
        
        await bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text=response,
            reply_markup=markup,
            parse_mode="HTML"
        )
        

    @bot.callback_query_handler(func=lambda call: call.data == "toggle_reply_voice")
    async def handle_speech_settings(call: CallbackQuery):
        chat_id = call.message.chat.id
        user_id = call.from_user.id
        message_id = call.message.message_id

        user_data = await get_user_info(user_id)
        tts_settings = user_data.get("tts_settings", {})
        process_voice_messages = tts_settings.get("process_voice_messages", False)
        reply_voice_messages = tts_settings.get("reply_voice_messages", False)
        new_reply_voice_messages = not reply_voice_messages
            
        await users_collection.update_one(
            {"user_id": user_id},
            {
                "$set": {
                    "tts_settings.process_voice_messages": process_voice_messages,
                    "tts_settings.reply_voice_messages": new_reply_voice_messages
                }
            }
        )
        
        response = TTS_SETTING_MESSAGE

        markup =  await create_voice_settings_keyboard(user_id)

        await bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text=response,
            reply_markup=markup,
            parse_mode="HTML"
        )


    @bot.callback_query_handler(func=lambda call: call.data == "choose_ai")
    async def handle_choose_ai(call: CallbackQuery):
        chat_id = call.message.chat.id
        user_id = call.from_user.id
        await ensure_user_exists(call.from_user)
        user_data = await get_user_info(user_id)

        if not user_data:
            await ensure_user_exists(call.from_user)
            user_data = await users_collection.find_one({"user_id": user_id})

        markup = await create_ai_keyboard(user_id, ai_handlers)
        await bot.edit_message_text(
            chat_id=chat_id,
            message_id=call.message.message_id,
            text=AI_MENU_MESSAGE,
            reply_markup=markup
        )


    @bot.callback_query_handler(func=lambda call: call.data.startswith("ai_"))
    async def handle_ai_callback(call: CallbackQuery):
        user_id = call.from_user.id
        chat_id = call.message.chat.id
        model_key = call.data[3:]
        model_data = AI_PRESETS.get(model_key)
        user_doc = await get_user_info(user_id)
        is_subscribed = user_doc.get("is_subscribed", False)

        try:
            if not is_subscribed and model_key != "gpt-4o":
                msg = await bot.send_message(chat_id, "‚ùóÔ∏è–ü–æ–¥–ø–∏—à–∏—Å—å, —á—Ç–æ–±—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —ç—Ç—É –º–æ–¥–µ–ª—å")
                await auto_delete_message(bot, chat_id, msg.message_id)
                return
            
            handler_info = ai_handlers.get(model_key)
            if not handler_info:
                msg = await bot.send_message(chat_id, "‚ùå –î–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
                await auto_delete_message(bot, chat_id, msg.message_id, 2)
                return
            
            if model_key == user_doc.get("ai_model"):
                await bot.answer_callback_query(call.id, "‚úÖ –ú–æ–¥–µ–ª—å —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞")
                return

            await users_collection.update_one({"user_id": user_id}, {"$set": {"ai_model": model_key}})
            description = model_data["description"]
            name = model_data["name"]

            text = f"""
üß† *{name}*

‚ÑπÔ∏è _{description}_
        """
            await bot.answer_callback_query(call.id, f"–í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å {AI_PRESETS[model_key]['name']}")
            markup = await create_ai_keyboard(user_id, ai_handlers)
            await safe_edit_message(bot, chat_id, call.message.message_id, text, markup, "Markdown")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            await bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –º–æ–¥–µ–ª–∏")


    @bot.callback_query_handler(func=lambda call: call.data == "choose_role")
    async def handle_choose_role(call: CallbackQuery): 
        chat_id = call.message.chat.id
        user_id = call.from_user.id
        markup = await create_role_keyboard(user_id)
        await ensure_user_exists(call.from_user)
        await bot.edit_message_text(
            chat_id=chat_id,
            message_id=call.message.message_id,
            text=ROLE_MENU_MESSAGE,
            reply_markup=markup,
            parse_mode="Markdown"
        )


    @bot.callback_query_handler(func=lambda call: call.data.startswith("role_"))
    async def handle_role_callback(call: CallbackQuery):
        chat_id = call.message.chat.id
        user_id = call.from_user.id
        role_key = call.data[5:]
        role_data = ROLE_PRESETS.get(role_key)
        user_doc = await get_user_info(user_id)
        is_subscribed = user_doc.get("is_subscribed", False)

        try:
            if not is_subscribed and role_key not in  ["tarot_reader", "compatibility", "numerologist"]:
                msg = await bot.send_message(chat_id, "‚ùóÔ∏è–ü–æ–¥–ø–∏—à–∏—Å—å, —á—Ç–æ–±—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —ç—Ç—É —Ä–æ–ª—å")
                await auto_delete_message(bot, chat_id, msg.message_id)
                return

            if role_key == user_doc.get("role"):
                await bot.answer_callback_query(call.id, "‚úÖ –†–æ–ª—å —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞")
                return
            
            if role_key == "custom":
                msg = await bot.send_message(chat_id, "‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
                await auto_delete_message(bot, chat_id, msg.message_id)
                return
            else:
                await users_collection.update_one({"user_id": user_id}, {"$set": {"role": role_key}})
                description = role_data["description"]
                name = role_data["name"]
                text = f"""
*{name}*

‚ÑπÔ∏è _{description}_
                        """

            await bot.answer_callback_query(call.id, f"–†–æ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞: {name}")
            markup = await create_role_keyboard(user_id)
            await safe_edit_message(bot, chat_id, call.message.message_id, text, markup, "Markdown")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            await bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ä–æ–ª–∏")


    @bot.callback_query_handler(func=lambda call: call.data.startswith("history_"))
    async def handle_history_navigation(call: CallbackQuery):
        try:
            data_parts = call.data.split("_")
            direction = data_parts[1]
            page_index = int(data_parts[2])
        except (ValueError, IndexError):
            await bot.answer_callback_query(call.id, "–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
            return

        user_id = call.from_user.id
        chat_id = call.message.chat.id
        message_id = call.message.message_id

        if direction == "prev":
            new_index = page_index - 1
        elif direction == "next":
            new_index = page_index + 1
        else:
            await bot.answer_callback_query(call.id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
            return

        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        await bot.delete_message(chat_id, message_id)
        await show_history_page(bot, chat_id, user_id, new_index)
        await bot.answer_callback_query(call.id)


    @bot.callback_query_handler(func=lambda call: call.data == "clear_history")
    async def handle__clear_history(call: CallbackQuery):
        chat_id = call.message.chat.id
        markup = types.InlineKeyboardMarkup()
        confirm_btn = types.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_clear")
        back_btn = types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_clear")
        markup.row(confirm_btn, back_btn)

        await bot.send_message(chat_id, CLEAR_DIALOG_MESSAGE, reply_markup=markup)


    @bot.callback_query_handler(func=lambda call: call.data == "confirm_clear")
    async def handle_confirm_clear(call: CallbackQuery):
        user = call.from_user
        deleted_count = await clear_user_history(user.id)

        await bot.answer_callback_query(call.id, "–ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞")
        await bot.send_message(call.message.chat.id, f"üóëÔ∏è –ò—Å—Ç–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞. –£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {deleted_count}")


    @bot.callback_query_handler(func=lambda call: call.data == "cancel_clear")
    async def handle_cancel_clear(call: CallbackQuery):
        chat_id = call.message.chat.id
        message_id = call.message.message_id
        
        try:
            await bot.delete_message(chat_id, message_id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        
        await bot.answer_callback_query(call.id, "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")


    @bot.callback_query_handler(func=lambda call:call.data == "subscribe" )
    async def handle_subscribe(call: CallbackQuery):
        user_id = call.from_user.id
        chat_id = call.message.chat.id
        await ensure_user_exists(call.from_user)

        if await is_user_subscribed(user_id):
            msg = await bot.send_message(
                chat_id,
                "üîÜ –í—ã —É–∂–µ –æ—Ñ–æ—Ä–º–∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É, –≤—Ç–æ—Ä–∞—è –Ω–µ –ø—Ä–∏–Ω–µ—Å–µ—Ç –Ω–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π"
            )
            await auto_delete_message(bot, chat_id, msg.message_id)
            return
        
        text = f"""
üåü –ü–æ–¥–ø–∏—Å–∫–∞ —Å—Ç–æ–∏—Ç –≤—Å–µ–≥–æ {SUBSCRIPTION_PRICE} ‚≠ê –≤ –º–µ—Å—è—Ü.
–û—Ñ–æ—Ä–º–∏ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –ò–ò –∏ —Ä–æ–ª—è–º.
–°—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏ 30 –¥–Ω–µ–π. 
/subscribe
                """
        msg = await bot.send_message(chat_id, text)
        await auto_delete_message(bot, chat_id, msg.message_id, 10)
        return
    
    
    @bot.pre_checkout_query_handler(func=lambda q: True)
    async def checkout(pre_checkout_query):
        await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)


    @bot.callback_query_handler(func=lambda call:call.data == "show_care_service" )
    async def handle_show_care_service(call: CallbackQuery):
        await bot.answer_callback_query(call.id, "–°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏")

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω-—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞
    @bot.callback_query_handler(func=lambda call:call.data == "admin_list_users")
    async def handle_list_users(call:CallbackQuery):
        await handle_admin_list_users(bot, call)

    # –ö–æ–ª–±—ç–∫ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –≤—ã–¥–∞—á–µ –ø–æ–¥–ø–∏—Å–∫–∏
    @bot.callback_query_handler(func=lambda call:call.data == "admin_grant_subs")
    async def handle_grant_subs(call:CallbackQuery):
        await handle_admin_grant_subs(bot, call)

    # –ö–æ–ª–±—ç–∫ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ—Ç–∑—ã–≤—É –ø–æ–¥–ø–∏—Å–∫–∏
    @bot.callback_query_handler(func=lambda call: call.data == "admin_revoke_subscription")
    async def callback_admin_revoke_subs(call):
        await handle_admin_revoke_subs(bot, call)

    # –†–∞—Å—Å—ã–ª–∫–∞ –æ —Ç–µ—Ö. –æ—Å–±–ª—É–∂–∏–≤–∞–Ω–∏–∏
    @bot.callback_query_handler(func=lambda call: call.data == "admin_send_maintenance")
    async def handle_send_maintenance(call: CallbackQuery):
        chat_id = call.message.chat.id
        user_id = call.from_user.id

        if user_id not in ADMINS:
            await bot.answer_callback_query(call.id, "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
            return

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
        confirmation_text = (
            "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º?\n\n"
            "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å."
        )
        markup = types.InlineKeyboardMarkup()
        confirm_button = types.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_maintenance_send")
        cancel_button = types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_maintenance_send")
        markup.add(confirm_button, cancel_button)

        await bot.edit_message_text(
            chat_id=chat_id,
            message_id=call.message.message_id,
            text=confirmation_text,
            reply_markup=markup
        )
        await bot.answer_callback_query(call.id)


    @bot.callback_query_handler(func=lambda call: call.data == "confirm_maintenance_send")
    async def handle_confirm_maintenance_send(call: CallbackQuery):
        chat_id = call.message.chat.id

        msg =await bot.edit_message_text(
            chat_id=chat_id,
            message_id=call.message.message_id,
            text="‚è≥ –†–∞—Å—Å—ã–ª–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...",
            reply_markup=None
        )

        response = await send_maintenance_notification(bot)

        await auto_delete_message(bot, chat_id, msg.message_id, delay=3)
        await bot.send_message(chat_id, f"üîî –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ({response[0]}) —É–≤–µ–¥–æ–º–ª–µ–Ω—ã –æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏.\n‚ö†Ô∏è {response[1]} –Ω–µ –±—ã–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω—ã.")


    @bot.callback_query_handler(func=lambda call: call.data == "cancel_maintenance_send")
    async def handle_cancel_maintenance_send(call: CallbackQuery):
        chat_id = call.message.chat.id
        await bot.edit_message_text(
            chat_id=chat_id,
            message_id=call.message.message_id,
            text="‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞",
            reply_markup=None
        )
        await bot.answer_callback_query(call.id, "–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")

    #–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–ø–∏—Å–µ–π 
    @bot.callback_query_handler(func=lambda call: call.data == "process_export")
    async def handle_export_queries(call:CallbackQuery):
        user_id = call.from_user.id
        chat_id = call.message.chat.id

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞—Ç—É —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await bot.send_message(chat_id, "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î, –æ—Ç –∫–æ—Ç–æ—Ä–æ–π —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã:")
        user_states[user_id] = "awaiting_export_date"