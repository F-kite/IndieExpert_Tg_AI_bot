from telebot import types
from telebot.types import CallbackQuery
from config import *
from database.client import users_collection, get_user_info, ensure_user_exists, clear_user_history, is_user_subscribed
from utils.keyboards import create_ai_keyboard, create_role_keyboard, create_inline_menu
from utils.helpers import safe_edit_message, auto_delete_message, extract_russian_text, auto_delete_message
from utils.logger import get_logger

logger = get_logger(__name__)


def register_handlers(bot):
    @bot.callback_query_handler(func=lambda call: call.data == "back_to_main")
    def handle_back_to_main(call):
        chat_id = call.message.chat.id
        message_id = call.message.message_id
        markup = create_inline_menu(INLINE_BUTTONS)

        bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text=WELCOME_MESSAGE,
            reply_markup=markup
        )
        bot.answer_callback_query(call.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")


    @bot.callback_query_handler(func=lambda call:call.data == "show_profile" )
    def handle_show_profile(call):
        chat_id = call.message.chat.id
        user_id = call.from_user.id
        message_id = call.message.message_id
        user_profile = get_user_info(user_id)
        markup = types.InlineKeyboardMarkup()
        is_admin =  ""

        if user_id in ADMINS : is_admin = "üîÜ –¶–∞—Ä—å –∏ –±–æ–≥ (–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä)"

        if not user_profile:
            # bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            msg = bot.send_message(chat_id, "‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            auto_delete_message(chat_id, msg.message_id)
            return
        
        model_name = AI_PRESETS.get(user_profile.get("ai_model", "default"), {}).get("name","–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å")
        role_name = ROLE_PRESETS.get(user_profile.get("role", "default"), {}).get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å")
        response = f"""
üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:

ü™™ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <code>{user_profile.get('username')}</code>
üí∏ –ü–æ–¥–ø–∏—Å–∫–∞: {"‚úÖ" if user_profile.get("is_subscribed", False) else "‚ùå"}
üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: <i>{user_profile.get("registered_at").strftime("%Y-%m-%d")}</i>
üß† –¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å –ò–ò: <i>{model_name}</i>
üé≠ –¢–µ–∫—É—â–∞—è —Ä–æ–ª—å –±–æ—Ç–∞: <i>{extract_russian_text(role_name)}</i>
    """
        if is_admin:
            response += f"\n{is_admin}"

        stat_btn= types.InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="user_statistics")
        back_btn = types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
        markup.add(stat_btn)
        markup.add(back_btn)

        bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=response, reply_markup=markup, parse_mode="HTML")
        bot.answer_callback_query(call.id, "–ü—Ä–æ—Ñ–∏–ª—å")


    @bot.callback_query_handler(func=lambda call: call.data == "user_statistics")
    def handle_user_statistics(call):
        chat_id = call.message.chat.id
        message_id = call.message.message_id
        user_id = call.from_user.id
        user_profile = get_user_info(user_id)
        markup = types.InlineKeyboardMarkup()

        stat_btn= types.InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="show_profile")
        back_btn = types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
        markup.add(stat_btn)
        markup.add(back_btn)

        response = f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü:\n\n"
        for model, count in user_profile.get("monthly_usage", {}).items():
            ai_model = AI_PRESETS.get(model).get("name","–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å")
            response += f"‚ñ´Ô∏è {ai_model}: <b>{count}</b>\n" 

        bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text=response,
            reply_markup=markup,
            parse_mode="HTML"
        )
        bot.answer_callback_query(call.id, "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤")

    @bot.callback_query_handler(func=lambda call: call.data == "choose_ai")
    def handle_choose_ai(call):
        chat_id = call.message.chat.id
        user_id = call.from_user.id
        user_data = get_user_info(user_id)

        if not user_data:
            ensure_user_exists(call.from_user)
            user_data = users_collection.find_one({"user_id": user_id})

        markup = create_ai_keyboard(user_id)
        bot.edit_message_text(
            chat_id=chat_id,
            message_id=call.message.message_id,
            text=AI_MENU_MESSAGE,
            reply_markup=markup
        )


    @bot.callback_query_handler(func=lambda call: call.data.startswith("ai_"))
    def handle_ai_callback(call: CallbackQuery):
        user_id = call.from_user.id
        chat_id = call.message.chat.id
        model_key = call.data[3:]
        model_data = AI_PRESETS.get(model_key)
        user_doc = get_user_info(user_id)
        is_subscribed = user_doc.get("is_subscribed", False)

        if not is_subscribed and model_key != "gpt-4o":
            msg = bot.send_message(chat_id, "‚ùóÔ∏è–ü–æ–¥–ø–∏—à–∏—Å—å, —á—Ç–æ–±—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —ç—Ç—É –º–æ–¥–µ–ª—å")
            auto_delete_message(chat_id, msg.message_id)
            return
        
        if model_key == get_user_info(user_id).get("ai_model"):
            bot.answer_callback_query(call.id, "‚úÖ –ú–æ–¥–µ–ª—å —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞")
            return

        users_collection.update_one({"user_id": user_id}, {"$set": {"ai_model": model_key}})
        description = model_data["description"]
        name = model_data["name"]

        text = f"""
üß† *{name}*

‚ÑπÔ∏è _{description}_
    """
        bot.answer_callback_query(call.id, f"–í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å {AI_PRESETS[model_key]['name']}")
        safe_edit_message(bot, chat_id, call.message.message_id, text, create_ai_keyboard(user_id), "Markdown")


    @bot.callback_query_handler(func=lambda call: call.data == "choose_role")
    def handle_choose_role(call): 
        chat_id = call.message.chat.id
        user_id = call.from_user.id
        markup = create_role_keyboard(user_id)
        bot.edit_message_text(
            chat_id=chat_id,
            message_id=call.message.message_id,
            text=ROLE_MENU_MESSAGE,
            reply_markup=markup,
            parse_mode="Markdown"
        )


    @bot.callback_query_handler(func=lambda call: call.data.startswith("role_"))
    def handle_role_callback(call: CallbackQuery):
        chat_id = call.message.chat.id
        user_id = call.from_user.id
        role_key = call.data[5:]
        role_data = ROLE_PRESETS.get(role_key)
        user_doc = get_user_info(user_id)
        is_subscribed = user_doc.get("is_subscribed", False)

        if not is_subscribed and role_key != "default":
            msg = bot.send_message(chat_id, "‚ùóÔ∏è–ü–æ–¥–ø–∏—à–∏—Å—å, —á—Ç–æ–±—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —ç—Ç—É —Ä–æ–ª—å")
            auto_delete_message(chat_id, msg.message_id)
            return

        if role_key == get_user_info(user_id).get("role"):
            bot.answer_callback_query(call.id, "‚úÖ –†–æ–ª—å —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞")
            return
        
        if role_key == "custom":
            msg =  bot.send_message(chat_id, "‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
            auto_delete_message(chat_id, msg.message_id)
            return
        else:
            users_collection.update_one({"user_id": user_id}, {"$set": {"role": role_key}})
            description = role_data["description"]
            name = role_data["name"]
            text = f"""
*{name}*

‚ÑπÔ∏è _{description}_
                    """

            bot.answer_callback_query(call.id, f"–†–æ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞: {name}")
        safe_edit_message(bot, chat_id, call.message.message_id, text, create_role_keyboard(user_id), "Markdown")

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏
    @bot.callback_query_handler(func=lambda call: call.data == "confirm_clear")
    def handle_confirm_clear(call):
        user = call.from_user
        deleted_count = clear_user_history(user.id)

        bot.answer_callback_query(call.id, "–ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞")
        bot.send_message(call.message.chat.id, f"üóëÔ∏è –ò—Å—Ç–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞. –£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {deleted_count}")


    @bot.callback_query_handler(func=lambda call:call.data == "subscribe" )
    def handle_subscribe(call):
        user_id = call.from_user.id
        chat_id = call.message.chat.id

        if is_user_subscribed(user_id):
            msg = bot.send_message(
                chat_id,
                "üîÜ –í—ã —É–∂–µ –æ—Ñ–æ—Ä–º–∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É, –≤—Ç–æ—Ä–∞—è –Ω–µ –ø—Ä–∏–Ω–µ—Å–µ—Ç –Ω–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π"
            )
            auto_delete_message(chat_id, msg.message_id)
            return
        
        text = f"""
üåü –ü–æ–¥–ø–∏—Å–∫–∞ —Å—Ç–æ–∏—Ç –≤—Å–µ–≥–æ {SUBSCRIPTION_PRICE} ‚≠ê –≤ –º–µ—Å—è—Ü.
–û—Ñ–æ—Ä–º–∏ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –ò–ò –∏ —Ä–æ–ª—è–º.
–°—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏ 30 –¥–Ω–µ–π. 
/subscribe
                """
        msg = bot.send_message(chat_id, text)
        auto_delete_message(chat_id, msg.message_id, 10)
        return


    @bot.callback_query_handler(func=lambda call:call.data == "show_care_service" )
    def handle_show_care_service(call):
        bot.answer_callback_query(call.id, "–°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏")