from telebot import types
from telebot.types import Message, LabeledPrice
from datetime import datetime, timedelta
from config import *
from database.client import *
from utils.keyboards import create_inline_menu, create_ai_keyboard, create_role_keyboard, create_payment_keyboard
from utils.helpers import *
from utils.history_pages import show_history_page
from utils.limits_check import check_ai_usage
from utils.logger import get_logger
from utils.subscription_checker import check_subscriptions_expiry
from utils.image_helpers import download_url_image

from handlers.admin_handlers import process_grant_subs_input
from utils.keyboards import create_admin_keyboard

logger = get_logger(__name__)

def register_handlers(bot, user_tasks, ai_handlers):
    @bot.message_handler(commands=["start"])
    async def cmd_send_welcome(message: Message):        
        await ensure_user_exists(message.from_user)
        markup = create_inline_menu(INLINE_BUTTONS)
        await bot.send_message(message.chat.id, WELCOME_MESSAGE, reply_markup=markup)


    @bot.message_handler(commands=["profile"])
    async def cmd_send_profile(message: Message):
        markup = types.InlineKeyboardMarkup()
        user_id = message.from_user.id
        await ensure_user_exists(message.from_user)
        user_profile = await get_user_info(user_id)
        is_admin =  ""

        if user_id in ADMINS : is_admin = "üîÜ –¶–∞—Ä—å –∏ –±–æ–≥ (–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä)"

        if not user_profile:
            msg = await bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await auto_delete_message(bot, message.chat.id, msg.message_id)
            return
        
        model_name = AI_PRESETS.get(user_profile.get("ai_model", "default"), {}).get("name","–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å")
        role_name = ROLE_PRESETS.get(user_profile.get("role", "default"), {}).get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å")
        
        response = f"""
üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:

ü™™ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <code>{user_profile.get('username')}</code>
üí∏ –ü–æ–¥–ø–∏—Å–∫–∞: {"‚úÖ" if user_profile.get("is_subscribed", False) else "‚ùå"}
üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: <i>{user_profile.get("registered_at").strftime("%Y-%m-%d")}</i>
üß† –¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å –ò–ò: <i>{model_name}</i>
üé≠ –¢–µ–∫—É—â–∞—è —Ä–æ–ª—å –±–æ—Ç–∞: <i>{extract_russian_text(role_name)}</i>
                    """
        
        if is_admin:
            response += f"\n{is_admin}"

        stat_btn= types.InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="user_statistics")
        back_btn = types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
        markup.add(stat_btn)
        markup.add(back_btn)

        await bot.send_message(message.chat.id, response, reply_markup=markup, parse_mode="HTML")


    @bot.message_handler(commands=["choose_ai"])
    async def cmd_choose_ai(message: Message):
        user = message.from_user
        user_id = user.id
        await ensure_user_exists(user)
        
        user_data = await get_user_info(user_id)
        
        markup = await create_ai_keyboard(user_id, ai_handlers)
        await bot.send_message(message.chat.id, AI_MENU_MESSAGE, reply_markup=markup)


    @bot.message_handler(commands=["choose_role"])
    async def cmd_choose_role(message: Message):
        user = message.from_user
        user_id = user.id
        await ensure_user_exists(user)

        user_data = await get_user_info(user_id)

        markup = await create_role_keyboard(user_id)
        await bot.send_message(message.chat.id, ROLE_MENU_MESSAGE, reply_markup=markup, parse_mode="Markdown")


    @bot.message_handler(commands=["custom_role"])
    async def cmd_custom_role(message: Message):
        msg = await bot.send_message(message.chat.id, "‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
        await auto_delete_message(bot, message.chat.id, msg.message_id)
        return
        user = message.from_user
        ensure_user_exists(user)
        user_id = user.id

        users_collection.update_one(
            {"user_id": user_id},
            {"$set": {"role": "custom"}}
        )

        await bot.send_message(message.chat.id, """
    ‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç.
    –ü—Ä–∏–º–µ—Ä:
    "–í—ã ‚Äî –ª–∏—á–Ω—ã–π –∫–æ—É—á, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –ª—é–¥—è–º –Ω–∞—Ö–æ–¥–∏—Ç—å —Å–µ–±—è –∏ –º–µ–Ω—è—Ç—å –∂–∏–∑–Ω—å."

    –í–∞—à –ø—Ä–æ–º–ø—Ç:
    """)
        user_states[user_id] = "waiting_for_custom_prompt"


    @bot.message_handler(commands=["subscribe"])
    async def cmd_subscribe(message: Message):
        user = message.from_user
        user_id = user.id
        chat_id = message.chat.id
        await ensure_user_exists(user)

        if await is_user_subscribed(user_id):
            msg = await bot.send_message(
                message.chat.id,
                "üîÜ –í—ã —É–∂–µ –æ—Ñ–æ—Ä–º–∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É, –≤—Ç–æ—Ä–∞—è –Ω–µ –ø—Ä–∏–Ω–µ—Å–µ—Ç –Ω–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π"
            )
            await auto_delete_message(bot, message.chat.id, msg.message_id)
            return

        if user_id in ADMINS:
            users_collection.update_one(
                {"user_id": user_id},
                {"$set": {"is_subscribed": True, "subscription_end": None}}  # –ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            )
            msg = await bot.send_message(message.chat.id, "üëë –í—ã ‚Äî –∞–¥–º–∏–Ω. –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –Ω–∞–≤—Å–µ–≥–¥–∞.")
            await auto_delete_message(bot, message.chat.id, msg.message_id)
            return

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–∫—É–ø–∫—É —á–µ—Ä–µ–∑ @invoice
        title = "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –±–æ—Ç–∞"
        description = "‚ÄºÔ∏è –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ—Ç –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Ä–µ–¥—Å—Ç–≤ –≤ –±—É–¥—É—â–µ–º"
        payload = f"sub_{user_id}_{int(datetime.now().timestamp())}"
        currency = "XTR"
        provider_token=""
        prices = [LabeledPrice(label="–ï–∂–µ–º–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞", amount=SUBSCRIPTION_PRICE)]
        # photo_url = "https://example.com/subscription_image.jpg "  # –ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ

        await bot.send_invoice(
                chat_id,
                title=title,
                description=description,
                invoice_payload=payload,
                currency=currency,
                prices=prices,
                provider_token=provider_token,
                # photo_url=photo_url,
                is_flexible=False,
                allow_paid_broadcast=True,  # –†–∞–∑—Ä–µ—à–∞–µ–º –æ–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ Stars
                reply_markup=create_payment_keyboard()
            )
        

    @bot.message_handler(content_types=["successful_payment"])
    async def handle_successful_payment(message: Message):
        user_id = message.from_user.id
        payment_info = message.successful_payment
        logger.info(f"üí∞ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ–ø–ª–∞—Ç–∏–ª –ø–æ–¥–ø–∏—Å–∫—É: {payment_info.total_amount} {payment_info.currency}")

        await users_collection.update_one(
            {"user_id": user_id},
            {
                "$set": {
                    "is_subscribed": True,
                    "subscription_start": datetime.now(),
                    "subscription_end": datetime.now() + timedelta(days=30)
                }
            }
        )
        await bot.send_message(message.chat.id, "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ 30 –¥–Ω–µ–π!")

        
    @bot.message_handler(commands=["unsubscribe"])
    async def cmd_unsubscribe(message: Message):
        user = message.from_user
        user_id = user.id
        await ensure_user_exists(user)
        
        await users_collection.update_one(
            {"user_id": user_id},
            {"$set": {"is_subscribed": False}}
        )
        await bot.send_message(message.chat.id, "‚ùå –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –±–æ—Ç–∞.")


    @bot.message_handler(commands=["history"])
    async def cmd_send_history(message: Message):
        user_id = message.from_user.id
        chat_id = message.chat.id
        history = await get_user_history(user_id)
        await ensure_user_exists(message.from_user)

        if not history:
            msg = await bot.send_message(message.chat.id, "–ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—É—Å—Ç–∞.")
            await auto_delete_message(bot, message.chat.id, msg.message_id)
            return
        
        await show_history_page(bot, chat_id, user_id, page_index=0)


    @bot.message_handler(commands=["privacy"])
    async def cmd_send_privacy(message: Message):
        await ensure_user_exists(message.from_user)
        await bot.send_message(message.chat.id, PRIVACY_MESSAGE, parse_mode="HTML")
    
    # --- –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ---
    @bot.message_handler(commands=["admin"])
    async def cmd_admin_panel(message: Message):
        chat_id = message.chat.id
        user_id = message.from_user.id

        if user_id not in ADMINS:
            msg = await bot.reply_to(message, "‚ö†Ô∏è –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è")
            await auto_delete_message(bot, chat_id, msg.message_id, 3)
            return

        await bot.send_message(
            chat_id=chat_id,
            text="üîê –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
            reply_markup=create_admin_keyboard()
        )

    # –ü—Ä–∏–Ω–∏–º–∞–µ–º –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ—Ç –∞–¥–º–∏–Ω–∞
    @bot.message_handler(func=lambda m: m.from_user.id in ADMINS and user_states.get(m.from_user.id) == "awaiting_user_ids_for_subscription")
    async def handle_grant_subscription_input(message: Message):
        user_id = message.from_user.id
        input_text = message.text
        await process_grant_subs_input(bot, message, input_text)
        user_states.pop(user_id, None)

    @bot.message_handler(func=lambda message: True)
    async def cmd_handle_message(message: Message):
        user = message.from_user
        user_id = user.id
        chat_id = message.chat.id
        user_prompt = message.text
        error_markup = create_inline_menu(SUPPORT_BUTTON)
        processing_msg = None
        await ensure_user_exists(user)

        def get_key_by_name(name):
            for key, data in AI_PRESETS.items():
                if data.get("name") == name:
                    return key
            return None  # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ

        try:
            if user_prompt.strip().startswith("/"):
                # –ò–≥–Ω–æ—Ä –∫–æ–º–∞–Ω–¥, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
                logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–æ–º–∞–Ω–¥—É, –Ω–æ –æ–Ω–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è: {user_prompt}")
                msg = await bot.reply_to(message, "‚ö†Ô∏è –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è")
                await auto_delete_message(bot, chat_id, msg.message_id, 3)
                return
            
            await check_subscriptions_expiry(bot, user_id=user_id)

            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if user_id in user_tasks:
                msg = await bot.send_message(chat_id, "‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
                await auto_delete_message(bot, chat_id, msg.message_id, 2)
                return
            
            user_data = await get_user_info(user_id)
            ai_preset = AI_PRESETS.get(user_data["ai_model"], AI_PRESETS["gpt-4o"])
            ai_role = ROLE_PRESETS.get(user_data["role"], ROLE_PRESETS["default"])
            ai_model = get_key_by_name(ai_preset["name"])
            role_prompt = await get_current_prompt(user_id)


            handler_info = ai_handlers.get(ai_model)
            if not handler_info:
                msg = await bot.send_message(chat_id, "‚ùå –î–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
                await auto_delete_message(bot, chat_id, msg.message_id, 2)
                return
            
            ai_method = handler_info["method"]
            ai_client = handler_info["client"]

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –∏ –ª–∏–º–∏—Ç—ã
            allowed, reason = await check_ai_usage(user_id, user_data["ai_model"])
            if not allowed:
                msg = await bot.send_message(chat_id, reason + ".\n\n–° –ø–æ–¥–ø–∏—Å–∫–æ–π –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ò–ò –∏—Å—á–µ–∑–Ω—É—Ç")
                await auto_delete_message(bot, chat_id, msg.message_id, 3)
                return
            
            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ messages —Å –∏—Å—Ç–æ—Ä–∏–µ–π –ø—Ä–æ—à–ª—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            messages = await build_history_messages(user_id, role_prompt, user_prompt, max_history=10)
            
            processing_msg_text = ""
            # –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–±—Ä–∞–±–æ—Ç–∫–µ
            if ai_model in ["dalle3", "midjourney"]:
                processing_msg_text = f"üß† {ai_preset['name']} –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –≤–∞—à–µ–º—É –æ–ø–∏—Å–∞–Ω–∏—é\n\n‚ÑπÔ∏è –°–æ–∑–¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –∏—Å—Ç–æ—Ä–∏–∏"
            else:
                processing_msg_text = f"üß† {ai_preset['name']} —Ñ–æ—Ä–º—É–ª–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –∫–∞–∫ {ai_role["name"]}"
            
            processing_msg = await bot.reply_to(message, processing_msg_text)

            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å –∑–∞–¥–∞—á
            user_tasks[user_id] = True

            # –í—ã–∑–æ–≤ –ò–ò
            ai_response = await ai_method(
                ai_model, ai_role,
                messages, ai_client
                
            )

            if ai_response != None and ai_model not in ["dalle3", "midjourney"]:
                formatted_response = clean_ai_response(ai_response)
                # formatted_response = ai_response
                await save_query_to_history(user_id, user_prompt, formatted_response)
                
                # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                await safe_delete_message(bot, chat_id, processing_msg.message_id )

                # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                await bot.send_message(chat_id, formatted_response, parse_mode="HTML")

                #–°—á–µ—Ç—á–∏–∫ –∏—Å–ø-—è +1
                await users_collection.update_one(
                    {"user_id": user_id},
                    {"$inc": {f"monthly_usage.{ai_model}": 1}}  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫
                )

            elif ai_response != None and ai_model in ["dalle3", "midjourney"]:
                
                image = await download_url_image(chat_id, ai_response)
                caption=f"""
üñºÔ∏è–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É:
```–ó–∞–ø—Ä–æ—Å
{messages[-1]["content"]}
```
                        """
                
                # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                await safe_delete_message(bot, chat_id, processing_msg.message_id )

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ
                await bot.send_photo(
                    chat_id=chat_id,
                    photo=image,
                    caption=caption,
                    parse_mode="MarkdownV2"
                )

                #–°—á–µ—Ç—á–∏–∫ –∏—Å–ø-—è +1
                await users_collection.update_one(
                    {"user_id": user_id},
                    {"$inc": {f"monthly_usage.{ai_model}": 1}}  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫
                )

            else:
                error_message = format_error_system_message(
                    title="–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞.",
                    error_text=str(e)
                )
                msg = await bot.send_message(chat_id, error_message, reply_markup=error_markup, parse_mode="MarkdownV2")
                await auto_delete_message(bot, chat_id, msg.message_id, 30)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            if processing_msg:
                await safe_delete_message(bot, chat_id, processing_msg.message_id)

            error_message = format_error_system_message(
                    title="–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞.",
                    error_text=str(e)
                )
            msg = await bot.send_message(chat_id, error_message, reply_markup=error_markup, parse_mode="MarkdownV2")
            await auto_delete_message(bot, chat_id, msg.message_id, 30)
        finally:
            # –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
            if user_id in user_tasks:
                del user_tasks[user_id]

