from telebot import types
from telebot.types import Message, LabeledPrice
from datetime import datetime, timedelta
from config import *
from database.client import ensure_user_exists, get_user_info, is_user_subscribed, get_user_history, users_collection
from utils.keyboards import create_inline_menu, create_ai_keyboard, create_role_keyboard, create_payment_keyboard
from utils.helpers import auto_delete_message
from utils.logger import get_logger

logger = get_logger(__name__)

def register_handlers(bot):
    @bot.message_handler(commands=["start"])
    def cmd_send_welcome(message: Message):
        ensure_user_exists(message.from_user)
        markup = create_inline_menu(INLINE_BUTTONS)
        bot.send_message(message.chat.id, WELCOME_MESSAGE, reply_markup=markup)


    @bot.message_handler(commands=["profile"])
    def cmd_send_profile(message: Message):
        user_id = message.from_user.id
        user_profile = get_user_info(user_id)
        is_admin =  ""

        if user_id in ADMINS : is_admin = "üîÜ –¶–∞—Ä—å –∏ –±–æ–≥ (–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä)"

        if not user_profile:
            msg = bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            auto_delete_message(message.chat.id, msg.message_id)
            return
        
        response = f"""
    üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:

    üîπ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_profile.get('username')}
    üîπ –ü–æ–¥–ø–∏—Å–∫–∞: {"‚úÖ" if user_profile.get("is_subscribed", False) else "‚ùå"}
    üîπ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user_profile.get("registered_at").strftime("%Y-%m-%d")}
    üîπ –¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å –ò–ò: {user_profile.get("ai_model", "–Ω–µ –≤—ã–±—Ä–∞–Ω–∞")}
    üîπ –¢–µ–∫—É—â–∞—è —Ä–æ–ª—å –±–æ—Ç–∞: {ROLE_PRESETS.get(user_profile.get("role", "default"), {}).get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å")}
                    """
        
        if is_admin:
            response += f"\n{is_admin}"

        bot.send_message(message.chat.id, response)


    @bot.message_handler(commands=["choose_ai"])
    def cmd_choose_ai(message: Message):
        user = message.from_user
        user_id = user.id
        ensure_user_exists(user)
        
        user_data = get_user_info(user_id)
        if not user_data.get("is_subscribed", False) and AI_PRESETS[user_data.get("ai_model", "gpt-4o")] != "gpt-4o":
            msg = bot.send_message(message.chat.id, "üîí –ù—É–∂–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å")
            auto_delete_message(message.chat.id, msg.message_id)
            return
        
        markup = create_ai_keyboard(user_id)
        bot.send_message(message.chat.id, AI_MENU_MESSAGE, reply_markup=markup)


    @bot.message_handler(commands=["choose_role"])
    def cmd_choose_role(message: Message):
        user = message.from_user
        user_id = user.id
        ensure_user_exists(user)

        user_data = get_user_info(user_id)
        if not user_data.get("is_subscribed", False):
            msg = bot.send_message(
                message.chat.id,
                "üîí –ù—É–∂–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é —Ä–æ–ª—å"
            )
            auto_delete_message(message.chat.id, msg.message_id)
            return

        markup = create_role_keyboard(user_id)
        bot.send_message(message.chat.id, ROLE_MENU_MESSAGE, reply_markup=markup, parse_mode="Markdown")


    @bot.message_handler(commands=["custom_role"])
    def cmd_custom_role(message: Message):
        msg =  bot.send_message(message.chat.id, "‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
        auto_delete_message(message.chat.id, msg.message_id)
        return
        user = message.from_user
        ensure_user_exists(user)
        user_id = user.id

        users_collection.update_one(
            {"user_id": user_id},
            {"$set": {"role": "custom"}}
        )

        bot.send_message(message.chat.id, """
    ‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç.
    –ü—Ä–∏–º–µ—Ä:
    "–í—ã ‚Äî –ª–∏—á–Ω—ã–π –∫–æ—É—á, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –ª—é–¥—è–º –Ω–∞—Ö–æ–¥–∏—Ç—å —Å–µ–±—è –∏ –º–µ–Ω—è—Ç—å –∂–∏–∑–Ω—å."

    –í–∞—à –ø—Ä–æ–º–ø—Ç:
    """)
        user_states[user_id] = "waiting_for_custom_prompt"


    @bot.message_handler(commands=["subscribe"])
    def cmd_subscribe(message: Message):
        user = message.from_user
        user_id = user.id
        chat_id = message.chat.id
        ensure_user_exists(user)

        if is_user_subscribed(user_id):
            msg = bot.send_message(
                message.chat.id,
                "üîÜ –í—ã —É–∂–µ –æ—Ñ–æ—Ä–º–∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É, –≤—Ç–æ—Ä–∞—è –Ω–µ –ø—Ä–∏–Ω–µ—Å–µ—Ç –Ω–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π"
            )
            auto_delete_message(message.chat.id, msg.message_id)
            return

        if user_id in ADMINS:
            users_collection.update_one(
                {"user_id": user_id},
                {"$set": {"is_subscribed": True, "subscription_end": None}}  # –ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            )
            msg = bot.send_message(message.chat.id, "üëë –í—ã ‚Äî –∞–¥–º–∏–Ω. –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –Ω–∞–≤—Å–µ–≥–¥–∞.")
            auto_delete_message(message.chat.id, msg.message_id)
            return

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–∫—É–ø–∫—É —á–µ—Ä–µ–∑ @invoice
        title = "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –±–æ—Ç–∞"
        description = "‚ÄºÔ∏è –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ—Ç –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Ä–µ–¥—Å—Ç–≤ –≤ –±—É–¥—É—â–µ–º"
        payload = f"sub_{user_id}_{int(datetime.now().timestamp())}"
        currency = "XTR"
        provider_token=""
        prices = [LabeledPrice(label="–ï–∂–µ–º–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞", amount=SUBSCRIPTION_PRICE)]
        # photo_url = "https://example.com/subscription_image.jpg "  # –ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ

        bot.send_invoice(
                chat_id,
                title=title,
                description=description,
                invoice_payload=payload,
                currency=currency,
                prices=prices,
                provider_token=provider_token,
                # photo_url=photo_url,
                is_flexible=False,
                allow_paid_broadcast=True,  # –†–∞–∑—Ä–µ—à–∞–µ–º –æ–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ Stars
                reply_markup=create_payment_keyboard()
            )
        

    @bot.message_handler(content_types=["successful_payment"])
    def handle_successful_payment(message: Message):
        user_id = message.from_user.id
        payment_info = message.successful_payment
        logger.info(f"üí∞ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ–ø–ª–∞—Ç–∏–ª –ø–æ–¥–ø–∏—Å–∫—É: {payment_info.total_amount} {payment_info.currency}")

        users_collection.update_one(
            {"user_id": user_id},
            {
                "$set": {
                    "is_subscribed": True,
                    "subscription_start": datetime.now(),
                    "subscription_end": datetime.now() + timedelta(days=30)
                }
            }
        )
        bot.send_message(message.chat.id, "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ 30 –¥–Ω–µ–π!")

        
    @bot.message_handler(commands=["unsubscribe"])
    def cmd_unsubscribe(message: Message):
        user = message.from_user
        user_id = user.id
        ensure_user_exists(user)
        
        users_collection.update_one(
            {"user_id": user_id},
            {"$set": {"is_subscribed": False}}
        )
        bot.send_message(message.chat.id, "‚ùå –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –±–æ—Ç–∞.")


    @bot.message_handler(commands=["history"])
    def cmd_send_history(message: Message):
        user_id = message.from_user.id
        history = get_user_history(user_id)
        if not history:
            msg =bot.send_message(message.chat.id, "–ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—É—Å—Ç–∞.")
            auto_delete_message(message.chat.id, msg.message_id)
            return

        response = f"{HISTORY_MESSAGE}\n\n"
        for item in history:
            response += f"\nüîπ {item['query']}\nü§ñ {item['response']}\n"

        bot.send_message(message.chat.id, response)


    @bot.message_handler(commands=["clear_history"])
    def cmd_confirm_clear_history(message: Message):
        markup = types.InlineKeyboardMarkup()
        confirm_btn = types.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_clear")
        back_btn = types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="back_to_main")
        markup.row(confirm_btn, back_btn)
        text = "‚ö†Ô∏è –ü–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –≤—ã –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ –ø–æ—Ç–µ—Ä—è–µ—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç–∏—å –≤–∞—à–∏ —Å—Ç–∞—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã.\n–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∑–∞–ø—Ä–æ—Å–æ–≤?"

        bot.send_message(message.chat.id, CLEAR_DIALOG_MESSAGE, reply_markup=markup)


    @bot.message_handler(commands=["policy"])
    def cmd_send_policy(message: Message):
        bot.send_message(message.chat.id, POLICY_MESSAGE, parse_mode="Markdown")

