from telebot.async_telebot import AsyncTeleBot
from telebot.types import Message, CallbackQuery
import asyncio

from database.client import get_all_users, grant_subscription_to_users, users_collection
from config import ADMINS, user_states
from utils.logger import get_logger
from utils.helpers import auto_delete_message

logger = get_logger(__name__)


async def handle_admin_list_users(bot: AsyncTeleBot, call: CallbackQuery):
    chat_id = call.message.chat.id
    user_id = call.from_user.id

    if user_id not in ADMINS:
        await bot.answer_callback_query(call.id, "‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return

    users = await get_all_users()

    if not users:
        await bot.send_message(chat_id, "ü´• –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞.")
        return

    response = "üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä | üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å\n\n"

    for user in users:
        user_id = int(user["user_id"])
        username = user.get("username", "–ù–µ —É–∫–∞–∑–∞–Ω")
        sub_status = "‚úÖ" if user.get("is_subscribed", False) else "‚ùå"
        role_label = "üëë" if user_id in ADMINS else "üë§"
        response += f"{role_label} @{username} ID: <code>{user_id}</code> –ü–æ–¥–ø–∏—Å–∫–∞: {sub_status}\n"

    await bot.send_message(chat_id, response, parse_mode="HTML")


async def handle_admin_grant_subs(bot: AsyncTeleBot, call: CallbackQuery):
    chat_id = call.message.chat.id
    user_id = call.from_user.id

    if user_id not in ADMINS:
        await bot.answer_callback_query(call.id, "‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    text = """
*Ô∏è‚É£ –ß—Ç–æ –±—ã –≤—ã–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –æ–¥–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:
        –í–≤–µ–¥–∏—Ç–µ –µ–≥–æ ID –∏–ª–∏ @username
*Ô∏è‚É£ –ß—Ç–æ –±—ã –≤—ã–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–µ—Å–∫–æ–ª—å–∫–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:
        –í–≤–µ–¥–∏—Ç–µ –∏—Ö ID –∏–ª–∏ @username —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é

‚ÑπÔ∏è –ü–æ–¥–ø–∏—Å–∫–∞ –≤—ã–¥–∞–µ—Ç—Å—è –Ω–∞ –º–µ—Å—è—Ü
"""
    await bot.send_message(chat_id, text)
    user_states[user_id] = "awaiting_user_ids_for_subscription"


async def process_grant_subs_input(bot: AsyncTeleBot, message: Message, input_text: str):
    chat_id = message.chat.id

    if not input_text.strip():
        msg = await bot.send_message(chat_id, "‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω `user_id` –∏–ª–∏ `@username`")
        await auto_delete_message(bot, chat_id, msg.message_id, 5)
        return

    try:
        ids_to_grant = []
        input_list = [item.strip() for item in input_text.split(",")]

        for identifier in input_list:
            if identifier.startswith("@"):
                # –ü–æ–∏—Å–∫ –ø–æ username
                user_doc = await users_collection.find_one({"username": identifier[1:]})
                if user_doc:
                    ids_to_grant.append(user_doc["user_id"])
            elif identifier.isdigit():
                # –ü–æ–∏—Å–∫ –ø–æ user_id
                user_doc = await users_collection.find_one({"user_id": int(identifier)})
                if user_doc:
                    ids_to_grant.append(int(identifier))
            else:
                logger.warning(f"‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: {identifier}")

        if not ids_to_grant:
            msg = await bot.send_message(chat_id, "‚ùå –ù–∏ –æ–¥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await auto_delete_message(bot, chat_id, msg.message_id, 5)
            return

        count = await grant_subscription_to_users(ids_to_grant)

        success_msg = await bot.send_message(
            chat_id, f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
        )
        await auto_delete_message(bot, chat_id, success_msg.message_id, delay=5)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        msg = await bot.send_message(chat_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")
        await auto_delete_message(bot, chat_id, msg.message_id, 5)


async def handle_admin_revoke_subs(bot: AsyncTeleBot, call: CallbackQuery):
    chat_id = call.message.chat.id
    user_id = call.from_user.id

    if user_id not in ADMINS:
        await bot.answer_callback_query(call.id, "‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return

    text = """
üö´ –ß—Ç–æ –±—ã –æ—Ç–æ–∑–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
        –í–≤–µ–¥–∏—Ç–µ –µ–≥–æ ID –∏–ª–∏ @username —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é

‚ÑπÔ∏è –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    """
    await bot.send_message(chat_id, text)
    user_states[user_id] = "awaiting_user_ids_for_revoking"


async def process_revoke_subs_input(bot: AsyncTeleBot, message: Message, input_text: str):
    chat_id = message.chat.id
    admin_id = message.from_user.id

    if not input_text.strip():
        msg = await bot.send_message(chat_id, "‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω `user_id` –∏–ª–∏ `@username`")
        await auto_delete_message(bot, chat_id, msg.message_id, delay=5)
        return

    # –û—á–∏—â–∞–µ–º –∏ —Ä–∞–∑–±–∏—Ä–∞–µ–º –≤–≤–æ–¥
    raw_inputs = [item.strip() for item in input_text.split(",") if item.strip()]
    failed_users = []
    revoked_count = 0

    for raw in raw_inputs:
        try:
            # –ï—Å–ª–∏ —ç—Ç–æ username
            if raw.startswith("@"):
                username = raw[1:]
                user_data = await users_collection.find_one({"username": username})
                if not user_data:
                    failed_users.append(raw)
                    continue
                user_id = user_data["user_id"]
            else:
                # –ï—Å–ª–∏ —ç—Ç–æ user_id
                user_id = int(raw)

            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–¥–º–∏–Ω–æ–≤
            if user_id in ADMINS:
                logger.info(f"üö´ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {admin_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –∑–∞–±—Ä–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É —É –¥—Ä—É–≥–æ–≥–æ –∞–¥–º–∏–Ω–∞ {user_id}")
                continue

            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
            result = await users_collection.update_one(
                {"user_id": user_id},
                {
                    "$set": {
                        "is_subscribed": False,
                        "subscription_start": "",
                        "subscription_end": None
                    }
                }
            )

            if result.modified_count == 0:
                failed_users.append(str(user_id))
            else:
                revoked_count += 1

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {raw}: {e}")
            failed_users.append(raw)

    # –û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω—É
    success_msg = f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–æ–∑–≤–∞–Ω–∞ —É {revoked_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
    await bot.send_message(chat_id, success_msg)

    if failed_users:
        failed_msg = f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–æ–∑–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É —É —Å–ª–µ–¥—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {', '.join(failed_users)}"
        await bot.send_message(chat_id, failed_msg)


#–†–∞—Å—Å—ã–ª–∫–∞ –æ —Ç–µ—Ö. –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏
async def send_maintenance_notification(bot: AsyncTeleBot):
    """
    –†–∞—Å—Å—ã–ª–∞–µ—Ç –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏.
    –ò–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø–∏—Å–∞–ª–∏ –±–æ—Ç—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞.
    """
    users = await get_all_users()

    if not users:
        logger.warning("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
        return

    notification_text = (
        "‚ö†Ô∏è <b>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ</b>\n\n"
        "–°–µ–π—á–∞—Å –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è –ø–ª–∞–Ω–æ–≤–æ–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ. "
        "–ë–æ—Ç –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ–∫–æ—Ç–æ—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.\n\n"
        "–ü—Ä–∏–Ω–æ—Å–∏–º —Å–≤–æ–∏ –∏–∑–≤–∏–Ω–µ–Ω–∏—è –∑–∞ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞."
    )

    failed_sends = []

    for user in users:
        user_id = user.get("user_id")

        try:
            await bot.send_message(user_id, notification_text, parse_mode="HTML")
            await asyncio.sleep(0.05)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å Telegram API
        except Exception as e:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            failed_sends.append(user_id)

    if failed_sends:
        logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(users) - len(failed_sends)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
        logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {len(failed_sends)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
    else:
        logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")

    return [len(users) - len(failed_sends), len(failed_sends)]