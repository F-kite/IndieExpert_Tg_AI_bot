from telebot.async_telebot import AsyncTeleBot
from telebot.types import Message, CallbackQuery

from database.client import get_all_users, grant_subscription_to_users, users_collection
from config import ADMINS, user_states
from utils.logger import get_logger
from utils.helpers import auto_delete_message

logger = get_logger(__name__)


async def handle_admin_list_users(bot: AsyncTeleBot, call: CallbackQuery):
    chat_id = call.message.chat.id
    user_id = call.from_user.id

    if user_id not in ADMINS:
        await bot.answer_callback_query(call.id, "‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return

    users = await get_all_users()

    if not users:
        await bot.send_message(chat_id, "ü´• –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞.")
        return

    response = "üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"

    for user in users:
        user_id = int(user["user_id"])
        username = user.get("username", "–ù–µ —É–∫–∞–∑–∞–Ω")
        sub_status = "‚úÖ" if user.get("is_subscribed", False) else "‚ùå"

        response += f"@{username} | ID: {user_id} | –ü–æ–¥–ø–∏—Å–∫–∞: {sub_status}\n"

    await bot.send_message(chat_id, response)


async def handle_admin_grant_subs(bot: AsyncTeleBot, call: CallbackQuery):
    chat_id = call.message.chat.id
    user_id = call.from_user.id

    if user_id not in ADMINS:
        await bot.answer_callback_query(call.id, "‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    text = """
*Ô∏è‚É£ –ß—Ç–æ –±—ã –≤—ã–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –æ–¥–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:
        –í–≤–µ–¥–∏—Ç–µ –µ–≥–æ ID –∏–ª–∏ @username
*Ô∏è‚É£ –ß—Ç–æ –±—ã –≤—ã–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–µ—Å–∫–æ–ª—å–∫–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:
        –í–≤–µ–¥–∏—Ç–µ –∏—Ö ID –∏–ª–∏ @username —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é

‚ÑπÔ∏è –ü–æ–¥–ø–∏—Å–∫–∞ –≤—ã–¥–∞–µ—Ç—Å—è –Ω–∞ –º–µ—Å—è—Ü
"""
    await bot.send_message(chat_id, text)
    user_states[user_id] = "awaiting_user_ids_for_subscription"


async def process_grant_subs_input(bot: AsyncTeleBot, message: Message, input_text: str):
    chat_id = message.chat.id
    user_id = message.from_user.id

    if not input_text.strip():
        msg = await bot.send_message(chat_id, "‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω `user_id` –∏–ª–∏ `@username`")
        await auto_delete_message(bot, chat_id, msg.message_id, 5)
        return

    try:
        ids_to_grant = []
        input_list = [item.strip() for item in input_text.split(",")]

        for identifier in input_list:
            if identifier.startswith("@"):
                # –ü–æ–∏—Å–∫ –ø–æ username
                user_doc = await users_collection.find_one({"username": identifier[1:]})
                if user_doc:
                    ids_to_grant.append(user_doc["user_id"])
            elif identifier.isdigit():
                # –ü–æ–∏—Å–∫ –ø–æ user_id
                user_doc = await users_collection.find_one({"user_id": int(identifier)})
                if user_doc:
                    ids_to_grant.append(int(identifier))
            else:
                logger.warning(f"‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: {identifier}")

        if not ids_to_grant:
            msg = await bot.send_message(chat_id, "‚ùå –ù–∏ –æ–¥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await auto_delete_message(bot, chat_id, msg.message_id, 5)
            return

        count = await grant_subscription_to_users(ids_to_grant)

        success_msg = await bot.send_message(
            chat_id, f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
        )
        await auto_delete_message(bot, chat_id, success_msg.message_id, delay=5)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        msg = await bot.send_message(chat_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")
        await auto_delete_message(bot, chat_id, msg.message_id, 5)