from pymongo import MongoClient
from datetime import datetime
from dotenv import load_dotenv
from config import *
from utils.logger import get_logger

load_dotenv()


client = MongoClient(MONGODB_BOT_URI)
db = client[MONGODB_DB_NAME]
users_collection = db["users"]
history_collection = db["history"]
logger = get_logger(__name__)

def test_mongo_connection():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB."""
    try:
        # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ë–î
        client.admin.command('ping')
        logger.info("‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.")
        return True
    except Exception as e:
        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è: {e}")
        return False
if not test_mongo_connection():
    logger.error("‚õî –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞. –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
    exit(1)


# –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
def ensure_user_exists(user):
    # –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = user.id
    if user_id == BOT_ID:
        return

    now = datetime.now()
    user_doc = users_collection.find_one({"user_id": user_id})

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–≥–æ
    if not user_doc:
        request_limits = {}
        for key in AI_PRESETS.keys():
            request_limits[key] = {"count": 0, "last_reset": now}

        user_data = {
            "user_id": user_id,
            "first_name": user.first_name,
            "username": user.username,
            "registered_at": now,
            "last_seen": now,
            "is_subscribed": False,
            "subscription_start":"",
            "subscription_end": "",
            "ai_model": "gpt-4o",
            "role": "default",
            "custom_prompt":"",
            "request_limits": request_limits
        }
        users_collection.insert_one(user_data)
    else:
        is_subscribed = user_doc.get("is_subscribed", False)

        if not is_subscribed and user_id in ADMINS:
            users_collection.update_one(
                {"user_id": user_id},
                {"$set": {"is_subscribed": True, "subscription_end": None}}  # –ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            )

        if not is_subscribed:
           users_collection.update_one(
            {"user_id": user_id},
            {"$set": {"ai_model": "gpt-4o", "role":"default"}}
        )
           
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ª–∏–º–∏—Ç—ã –≤ –Ω–∞—á–∞–ª–µ –Ω–æ–≤–æ–≥–æ –º–µ—Å—è—Ü–∞
        if user_doc.get("last_month", None) != now.month:
            users_collection.update_one(
                {"user_id": user_id},
                {
                    "$set": {
                        "last_month": now.month,
                        "monthly_usage": {model_key: 0 for model_key in AI_PRESETS.keys()}
                    }
                }
            )
           
        # –ï—Å–ª–∏ –µ—Å—Ç—å ‚Äî –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ last_seen
        users_collection.update_one(
            {"user_id": user_id},
            {"$set": {"last_seen": now}}
        )
    

def get_user_history(user_id):
    return list(history_collection.find({"user_id": user_id}, {"_id": 0}).sort("timestamp", -1))


def save_query_to_history(user_id, query, response):
    history_collection.insert_one({
        "user_id": user_id,
        "query": query,
        "response": response,
        "timestamp": datetime.now()
    })


def is_user_subscribed(user_id):
    user_data = users_collection.find_one({"user_id": user_id})
    if not user_data:
        return False
    
    # –ê–¥–º–∏–Ω—ã –≤—Å–µ–≥–¥–∞ –ø–æ–¥–ø–∏—Å–∞–Ω—ã
    if user_id in ADMINS:
        return True

    return user_data.get("is_subscribed", False)


def clear_user_history(user_id):
    result = history_collection.delete_many({"user_id": user_id})
    logger.info(f"üßπ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—á–∏—Å—Ç–∏–ª —Å–≤–æ—é –∏—Å—Ç–æ—Ä–∏—é –∑–∞–ø—Ä–æ—Å–æ–≤.")
    return result.deleted_count


def get_user_info(user_id):
    return users_collection.find_one({"user_id": user_id})


def get_current_prompt(user_id):
    user_data = get_user_info(user_id)
    role_key = user_data.get("role", "default")
    custom_prompt = user_data.get("custom_prompt", "")

    if role_key == "custom" and custom_prompt:
        return custom_prompt
    else:
        preset = ROLE_PRESETS.get(role_key, ROLE_PRESETS["default"])
        return preset["prompt"]