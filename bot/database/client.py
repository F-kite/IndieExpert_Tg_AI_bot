from motor.motor_asyncio import AsyncIOMotorClient
from datetime import datetime, timedelta
from dotenv import load_dotenv
from config import *
from utils.logger import get_logger

load_dotenv()


client = AsyncIOMotorClient(MONGODB_BOT_URI)
db = client[MONGODB_DB_NAME]
users_collection = db["users"]
history_collection = db["history"]
logger = get_logger(__name__)

DEFAULT_USER_DATA = {
    "is_subscribed": False,
    "subscription_start": "",
    "subscription_end": None,
    "ai_model": "gpt-4o",
    "role": "tarot_reader",
    "custom_prompt": "",
    "request_limits": {},
    "monthly_usage": {},
    "last_seen": None,
    "registered_at": None,
    "tts_settings": {
        "process_voice_messages":False, #–ü–æ—Å–ª–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –∫ –ò–ò
        "reply_voice_messages":False #–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –≤ —Ä–µ—á—å –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ
    }
}


async def test_mongo_connection():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB."""
    try:
        # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ë–î
        await client.admin.command('ping')
        logger.info("‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö")
        return True
    except Exception as e:
        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è: {e}")
        return False
    

# –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
async def ensure_user_exists(user):
    # –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = user.id
    if user_id == BOT_ID:
        return

    now = datetime.now()
    user_data = await users_collection.find_one({"user_id": user_id})

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞—ë–º –µ–≥–æ –≤ –±–¥
    if not user_data:
        request_limits = {key: {"count": 0} for key in AI_PRESETS.keys()}
        monthly_usage = {key: 0 for key in AI_PRESETS.keys()}

        new_user_data = DEFAULT_USER_DATA.copy()
        new_user_data.update({
            "user_id": user_id,
            "first_name": user.first_name,
            "username": user.username,
            "registered_at": now,
            "last_seen": now,
            "request_limits": request_limits,
            "monthly_usage": monthly_usage
        })
        
        await users_collection.insert_one(new_user_data)
        return

    is_subscribed = user_data.get("is_subscribed", False)
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–¥
    update_data = {}
    
    for field, default_value in DEFAULT_USER_DATA.items():
        if field not in user_data:
            update_data[field] = default_value

    if update_data:
        await users_collection.update_one(
            {"user_id": user_id},
            {"$set": update_data}
        )

    # –í—ã–¥–∞—á–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –∞–¥–º–∏–Ω–∞–º
    if user_id in ADMINS:
        await users_collection.update_one(
            {"user_id": user_id},
            {"$set": {"is_subscribed": True, "subscription_end": None}}  # –ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        )

    subscription_end = user_data.get("subscription_end", None)

    if subscription_end == "":
        subscription_end = None
    elif isinstance(subscription_end, str):
        try:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ –æ–±—ä–µ–∫—Ç datetime
            subscription_end = datetime.fromisoformat(subscription_end)
        except ValueError:
            logger.warning(f"[DEBUG] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            logger.warning(f"[DEBUG] subscription_end: {subscription_end} | –¢–∏–ø: {type(subscription_end)}")
            subscription_end = None

    # –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –µ—Å–ª–∏ –∏—Å—Ç–µ–∫ –µ–µ —Å—Ä–æ–∫
    if (subscription_end is not None) and (now.date() == subscription_end.date()):
        await users_collection.update_one(
            {"user_id": user_id},
            {"$set": {"is_subscribed": False}}
        )
        is_subscribed = False

    # –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ - –≤—Å–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if not is_subscribed:
        await users_collection.update_one(
        {"user_id": user_id},
        {"$set": {"ai_model": "gpt-4o", "role":"tarot_reader", "subscription_start":"", "subscription_end":""}}
    )
        
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ª–∏–º–∏—Ç—ã –≤ –Ω–∞—á–∞–ª–µ –Ω–æ–≤–æ–≥–æ –º–µ—Å—è—Ü–∞
    if user_data.get("last_month", None) != now.month:
        model_limit = {"count":0}

        await users_collection.update_one(
            {"user_id": user_id},
            {
                "$set": {
                    "last_month": now.month,
                    "monthly_usage": {model_key: 0 for model_key in AI_PRESETS.keys()},
                    "request_limits": {model_key: model_limit for model_key in AI_PRESETS.keys()}
                    
                }
            }
        )
            
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
    await users_collection.update_one(
        {"user_id": user_id},
        {"$set": {"last_seen": now}}
    )
    

async def get_all_users():
    cursor = users_collection.find()
    return await cursor.to_list(length=None)


async def get_user_history(user_id):
    cursor = history_collection.find({"user_id": user_id}, {"_id": 0})
    return await cursor.to_list(length=100)


async def save_query_to_history(user_id, query, response):
    await history_collection.insert_one({
        "user_id": user_id,
        "query": query,
        "response": response,
        "timestamp": datetime.now()
    })


async def is_user_subscribed(user_id):
    user_data = await users_collection.find_one({"user_id": user_id})
    if not user_data:
        return False
    
    # –ê–¥–º–∏–Ω—ã –≤—Å–µ–≥–¥–∞ –ø–æ–¥–ø–∏—Å–∞–Ω—ã
    if user_id in ADMINS:
        return True

    return user_data.get("is_subscribed", False)


async def get_all_users_with_subscription():
    try:
        cursor = users_collection.find({
            "is_subscribed": True,
            "subscription_end": {"$ne": None},  # —Ç–æ–ª—å–∫–æ —Å –¥–∞—Ç–æ–π –æ–∫–æ–Ω—á–∞–Ω–∏—è
            "user_id": {"$ne": BOT_ID}  # –∏—Å–∫–ª—é—á–∞–µ–º —Å–∞–º–æ–≥–æ –±–æ—Ç–∞
        })
        users = await cursor.to_list(length=None)
        return users
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–¥–ø–∏—Å–∫–æ–π: {e}")
        return []


async def clear_user_history(user_id):
    result = await history_collection.delete_many({"user_id": user_id})
    logger.info(f"üßπ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—á–∏—Å—Ç–∏–ª —Å–≤–æ—é –∏—Å—Ç–æ—Ä–∏—é –∑–∞–ø—Ä–æ—Å–æ–≤.")
    return result.deleted_count


async def get_user_info(user_id):
    info = await users_collection.find_one({"user_id": user_id})
    return info


async def get_current_prompt(user_id):
    user_data = await get_user_info(user_id)
    role_key = user_data.get("role", "tarot_reader")
    custom_prompt = user_data.get("custom_prompt", "")

    if role_key == "custom" and custom_prompt:
        return custom_prompt
    else:
        preset = ROLE_PRESETS.get(role_key)
        return preset["prompt"]
    
# –í—ã–¥–∞—á–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –∞–¥–º–∏–Ω–æ–º
async def grant_subscription_to_users(user_ids):
    now = datetime.now()
    result = await users_collection.update_many(
        {"user_id": {"$in": user_ids}},
        {
            "$set": {
                "is_subscribed": True,
                "subscription_start": now,
                "subscription_end": now + timedelta(days=30)
            }
        }
    )
    return result.modified_count