from telebot.types import LabeledPrice
from telebot.async_telebot import AsyncTeleBot
from telebot.apihelper import ApiTelegramException
from datetime import timedelta, datetime
from database.client import get_all_users_with_subscription, get_user_info
from utils.logger import get_logger
from utils.keyboards import create_payment_renew_keyboard
from config import SUBSCRIPTION_PRICE

logger = get_logger(__name__)

async def check_subscriptions_expiry(bot: AsyncTeleBot, user_id=0):
    """
    –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞: –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —É –∫–æ–≥–æ –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ 1 –¥–µ–Ω—å
    """
    
    now = datetime.now().date()
    date_tomorrow = now + timedelta(days=1)
    
    if user_id == 0:
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–¥–ø–∏—Å–∫–æ–π
        logger.info("‚è∞ –ù–∞—á–∏–Ω–∞—é –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–æ–∫")
        users = await get_all_users_with_subscription()

        if len(users) == 0:
            logger.info("üò® –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–¥–ø–∏—Å–∫–æ–π")
            return
        
    else:
        user_data = await get_user_info(user_id)
        subscription_end = user_data.get("subscription_end")

        if not user_data:
            logger.warning(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}")
            return

        users = [user_data]  # –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è

    for user_data in users:
        user_id = user_data["user_id"]
        subscription_end = user_data.get("subscription_end")

        if not subscription_end or subscription_end is None:
            continue

        if subscription_end.date() < now:
            continue

        # –ï—Å–ª–∏ –¥–æ –∫–æ–Ω—Ü–∞ –ø–æ–¥–ø–∏—Å–∫–∏ 1 –¥–µ–Ω—å
        if subscription_end.date() == date_tomorrow:
            try:
                logger.info(f"üîî –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è —á–µ—Ä–µ–∑ 1 –¥–µ–Ω—å")
                
                last_seen = user_data.get("last_seen", None)
                if not last_seen or (datetime.now() - last_seen).days > 1:
                    logger.info(f"üí§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–∞–≤–Ω–æ –Ω–µ –ø–∏—Å–∞–ª –±–æ—Ç—É")
                    continue
                
                markup = create_payment_renew_keyboard()

                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–∫—É–ø–∫—É —á–µ—Ä–µ–∑ @invoice
                title = "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –±–æ—Ç–∞"
                description = """
‚ÑπÔ∏è–ó–∞–≤—Ç—Ä–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç —Å—Ä–æ–∫ –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏. –°–∞–º–æ–µ –≤—Ä–µ–º—è –ø—Ä–æ–¥–ª–∏—Ç—å –µ–µ
‚ÄºÔ∏è –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ—Ç –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Ä–µ–¥—Å—Ç–≤ –≤ –±—É–¥—É—â–µ–º
                """
                payload = f"sub_{user_id}_{int(datetime.now().timestamp())}"
                currency = "XTR"
                provider_token=""
                prices = [LabeledPrice(label="–ï–∂–µ–º–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞", amount=SUBSCRIPTION_PRICE)]
                # photo_url = "https://example.com/subscription_image.jpg "  # –ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ
                
                await bot.send_invoice(
                        chat_id=int(user_id),
                        title=title,
                        description=description,
                        invoice_payload=payload,
                        currency=currency,
                        prices=prices,
                        provider_token=provider_token,
                        # photo_url=photo_url,
                        is_flexible=False,
                        allow_paid_broadcast=True,  # –†–∞–∑—Ä–µ—à–∞–µ–º –æ–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ Stars
                        reply_markup=markup
                    )
            except ApiTelegramException as e:
                if "bot was blocked by the user" in str(e).lower():
                    logger.warning(f"‚õî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞")
                elif "chat not found" in str(e).lower():
                    logger.warning(f"‚ùå –ß–∞—Ç {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ –∑–∞–ø—É—Å–∫–∞–ª –±–æ—Ç–∞)")
                else:
                    logger.error(f"‚ùóTelegram API –æ—à–∏–±–∫–∞: {e}")
            except Exception as e:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        else:
            logger.info("üîî –û–∫–∞–Ω—á–∏–≤–∞—é—â–∏—Ö—Å—è –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")